from aiogram import F
from aiogram.types import InlineKeyboardButton, InlineKeyboardMarkup, CallbackQuery, Message
from aiogram.filters import CommandStart, StateFilter
from aiogram import Bot, Dispatcher
import asyncio
import logging
from aiogram import types
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import State, StatesGroup
from aiogram import Router
from db import add_channel_to_db, get_user_channels, remove_channel_from_db  # –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º —Ñ—É–Ω–∫—Ü–∏–∏ —Ä–∞–±–æ—Ç—ã —Å –ë–î
import os
from dotenv import load_dotenv
from db import (
    update_subscription_status,  # –§—É–Ω–∫—Ü–∏—è: update_subscription_status(user_id, toggle=False/True)
    get_user_channels,  # –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Å–ø–∏—Å–æ–∫ –∫–∞–Ω–∞–ª–æ–≤ –¥–ª—è –¥–∞–Ω–Ω–æ–≥–æ user_id
    add_channel,  # –ü—Ä–∏–≤—è–∑—ã–≤–∞–µ—Ç –∫–∞–Ω–∞–ª –∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
    remove_channel_from_db,  # –£–¥–∞–ª—è–µ—Ç –∫–∞–Ω–∞–ª –∏–∑ –±–∞–∑—ã –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    get_user_filters,  # –ü–æ–ª—É—á–∞–µ—Ç —Ñ–∏–ª—å—Ç—Ä—ã –¥–ª—è —Ä–∞—Å—Å—ã–ª–∫–∏
    save_send_time_to_db,  # –°–æ—Ö—Ä–∞–Ω—è–µ—Ç –≤—Ä–µ–º—è —Ä–∞—Å—Å—ã–ª–∫–∏
    get_send_time_from_db,  # –ü–æ–ª—É—á–∞–µ—Ç –≤—Ä–µ–º—è —Ä–∞—Å—Å—ã–ª–∫–∏
    get_all_users_for_subscription,  # –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –≤—Å–µ—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –¥–ª—è —Ä–∞—Å—Å—ã–ª–∫–∏
    get_animal_by_id,  # –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –∂–∏–≤–æ—Ç–Ω–æ–º –ø–æ ID
    update_user_filter,  init_db,  get_all_animals,
    get_animals_by_filter, get_subscription_status, get_animals_by_color
)

# –ó–∞–≥—Ä—É–∂–∞–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –∏–∑ .env
load_dotenv()

# –ü–æ–ª—É—á–∞–µ–º —Ç–æ–∫–µ–Ω
TOKEN = os.getenv("TOKEN")

# –ü—Ä–æ–≤–µ—Ä—è–µ–º, –∑–∞–≥—Ä—É–∂–µ–Ω –ª–∏ —Ç–æ–∫–µ–Ω
if TOKEN is None:
    raise ValueError("–ü–µ—Ä–µ–º–µ–Ω–Ω–∞—è –æ–∫—Ä—É–∂–µ–Ω–∏—è TOKEN –Ω–µ –Ω–∞–π–¥–µ–Ω–∞! –ü—Ä–æ–≤–µ—Ä—å—Ç–µ —Ñ–∞–π–ª .env.")

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è
bot = Bot(token=TOKEN, parse_mode="HTML")
dp = Dispatcher()
logging.basicConfig(level=logging.INFO)


# ======================== –ö–õ–ê–í–ò–ê–¢–£–†–´ ========================

def main_keyboard():
    """ –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é """
    keyboard = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="–ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å", callback_data="view_animals")],
        [InlineKeyboardButton(text="–†–∞—Å—Å—ã–ª–∫–∞", callback_data="manage_subscription")]
    ])
    return keyboard


def filters_keyboard():
    """ –ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –≤—ã–±–æ—Ä–∞ —Ñ–∏–ª—å—Ç—Ä–æ–≤ """
    keyboard = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="üê∂ –¢–æ–ª—å–∫–æ —Å–æ–±–∞—á–∫–∏", callback_data="filter_dogs")],
        [InlineKeyboardButton(text="üê± –¢–æ–ª—å–∫–æ –∫–æ—à–µ—á–∫–∏", callback_data="filter_cats")],
        [InlineKeyboardButton(text="üé® –ü–æ –æ–∫—Ä–∞—Å–∫–µ", callback_data="filter_color")],
        [InlineKeyboardButton(text="üìÖ –ü–æ –≤–æ–∑—Ä–∞—Å—Ç—É", callback_data="filter_age")],
        [InlineKeyboardButton(text="‚úÖ –ü–æ–∫–∞–∑–∞—Ç—å", callback_data="show_filtered")],
        [InlineKeyboardButton(text="üîô –í—ã–π—Ç–∏", callback_data="exit_filters")]  # –î–æ–±–∞–≤–∏–ª–∏ –∫–Ω–æ–ø–∫—É –≤—ã—Ö–æ–¥–∞
    ])
    return keyboard


def subscription_keyboard(user_id):
    """ –ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è —Ä–∞—Å—Å—ã–ª–∫–æ–π """
    channels = get_user_channels(user_id)
    buttons = [[InlineKeyboardButton(text=f"‚ûï –î–æ–±–∞–≤–∏—Ç—å –∫–∞–Ω–∞–ª", callback_data="add_channel")]] if not channels else []

    for channel in channels:
        buttons.append([InlineKeyboardButton(text=f"‚ùå {channel}", callback_data=f"remove_channel:{channel}")])

    buttons.append([InlineKeyboardButton(text="üîô –ù–∞–∑–∞–¥", callback_data="back")])

    return InlineKeyboardMarkup(inline_keyboard=buttons)

# –§—É–Ω–∫—Ü–∏—è, –≤–æ–∑–≤—Ä–∞—â–∞—é—â–∞—è –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –¥–ª—è –≤—ã–±–æ—Ä–∞ –æ–∫—Ä–∞—Å–∞
def color_keyboard() -> InlineKeyboardMarkup:
    return InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="–†—ã–∂–∏–π", callback_data="color_—Ä—ã–∂–∏–π")],
        [InlineKeyboardButton(text="–ß–µ—Ä–Ω—ã–π", callback_data="color_—á–µ—Ä–Ω—ã–π")],
        [InlineKeyboardButton(text="–ö–æ—Ä–∏—á–Ω–µ–≤—ã–π", callback_data="color_–∫–æ—Ä–∏—á–Ω–µ–≤—ã–π")],
        [InlineKeyboardButton(text="–ë–µ–ª—ã–π", callback_data="color_–±–µ–ª—ã–π")],
        [InlineKeyboardButton(text="üîô –í—ã–π—Ç–∏", callback_data="exit_filters")]
    ])

def subscription_keyboard() -> InlineKeyboardMarkup:
    """ –ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è —Ä–∞—Å—Å—ã–ª–∫–æ–π """
    keyboard = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="üîÑ –ü–µ—Ä–µ–∫–ª—é—á–∏—Ç—å —Å—Ç–∞—Ç—É—Å —Ä–∞—Å—Å—ã–ª–∫–∏", callback_data="toggle_subscription")],
        [InlineKeyboardButton(text="‚ûï –î–æ–±–∞–≤–∏—Ç—å –∫–∞–Ω–∞–ª/–≥—Ä—É–ø–ø—É", callback_data="add_channel")],
        [InlineKeyboardButton(text="‚ùå –£–¥–∞–ª–∏—Ç—å –∫–∞–Ω–∞–ª/–≥—Ä—É–ø–ø—É", callback_data="remove_channel")],
        [InlineKeyboardButton(text="üïí –£—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –≤—Ä–µ–º—è —Ä–∞—Å—Å—ã–ª–∫–∏", callback_data="set_send_time")],
        [InlineKeyboardButton(text="üîß –ù–∞—Å—Ç—Ä–æ–∏—Ç—å —Ñ–∏–ª—å—Ç—Ä—ã —Ä–∞—Å—Å—ã–ª–∫–∏", callback_data="configure_filters")],
        [InlineKeyboardButton(text="‚öôÔ∏è –í–∫–ª—é—á–∏—Ç—å/–≤—ã–∫–ª—é—á–∏—Ç—å —Ä–∞—Å—Å—ã–ª–∫—É –Ω–æ–≤—ã—Ö –∂–∏–≤–æ—Ç–Ω—ã—Ö", callback_data="toggle_new_animal_updates")],
        [InlineKeyboardButton(text="üîô –ù–∞–∑–∞–¥", callback_data="back_to_main")]
    ])
    return keyboard

def time_settings_keyboard():
    """–ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –¥–ª—è –Ω–∞—Å—Ç—Ä–æ–µ–∫ –≤—Ä–µ–º–µ–Ω–∏ —Ä–∞—Å—Å—ã–ª–∫–∏"""
    keyboard = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="–ß–∞—Å—Ç–æ—Ç–∞", callback_data="set_frequency")],
        [InlineKeyboardButton(text="–í—Ä–µ–º—è —Ä–∞—Å—Å—ã–ª–∫–∏", callback_data="set_time")],
        [InlineKeyboardButton(text="–°–±—Ä–æ—Å–∏—Ç—å –Ω–∞—Å—Ç—Ä–æ–π–∫–∏", callback_data="reset_settings")]
    ])
    return keyboard


def frequency_keyboard():
    """–ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –¥–ª—è –≤—ã–±–æ—Ä–∞ —á–∞—Å—Ç–æ—Ç—ã —Å–æ–æ–±—â–µ–Ω–∏–π –≤ –¥–µ–Ω—å"""
    keyboard = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="1 —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ –¥–µ–Ω—å", callback_data="message_count_1")],
        [InlineKeyboardButton(text="2 —Å–æ–æ–±—â–µ–Ω–∏—è –≤ –¥–µ–Ω—å", callback_data="message_count_2")],
        [InlineKeyboardButton(text="3 —Å–æ–æ–±—â–µ–Ω–∏—è –≤ –¥–µ–Ω—å", callback_data="message_count_3")],
        [InlineKeyboardButton(text="üîô –ù–∞–∑–∞–¥", callback_data="back_to_time_settings")]
    ])
    return keyboard

def time_keyboard():
    """–ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –¥–ª—è –≤—ã–±–æ—Ä–∞ –≤—Ä–µ–º–µ–Ω–∏ —Ä–∞—Å—Å—ã–ª–∫–∏"""
    keyboard = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="07:00", callback_data="time_07:00")],
        [InlineKeyboardButton(text="12:00", callback_data="time_12:00")],
        [InlineKeyboardButton(text="18:00", callback_data="time_18:00")],
        [InlineKeyboardButton(text="21:00", callback_data="time_21:00")],
        [InlineKeyboardButton(text="–†–∞–Ω–¥–æ–º–Ω–æ–µ –≤—Ä–µ–º—è", callback_data="time_random")]
    ])
    return keyboard

def reset_settings_keyboard():
    """–ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –¥–ª—è —Å–±—Ä–æ—Å–∞ –Ω–∞—Å—Ç—Ä–æ–µ–∫ –Ω–∞ –¥–µ—Ñ–æ–ª—Ç"""
    keyboard = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="–°–±—Ä–æ—Å–∏—Ç—å –Ω–∞ –¥–µ—Ñ–æ–ª—Ç (1 —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ –¥–µ–Ω—å, —Ä–∞–Ω–¥–æ–º–Ω–æ–µ –≤—Ä–µ–º—è)", callback_data="reset_default")]
    ])
    return keyboard

# ======================== –•–≠–ù–î–õ–ï–†–´ ========================


@dp.message(CommandStart())
async def start(message: Message):
    """ –°—Ç–∞—Ä—Ç–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ """
    await message.answer(
        "–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å! –≠—Ç–æ—Ç –±–æ—Ç –ø–æ–º–æ–≥–∞–µ—Ç –Ω–∞—Ö–æ–¥–∏—Ç—å –ø–∏—Ç–æ–º—Ü–µ–≤ –∏–∑ –ø—Ä–∏—é—Ç–∞.",
        reply_markup=main_keyboard()
    )


@dp.callback_query(F.data == "view_animals")
async def view_animals(callback: CallbackQuery):
    """ –í—ã–±–æ—Ä —Å–ø–æ—Å–æ–±–∞ –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –∂–∏–≤–æ—Ç–Ω—ã—Ö """
    keyboard = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="üìã –í—Å–µ", callback_data="view_all")],
        [InlineKeyboardButton(text="üîç –ü–æ —Ñ–∏–ª—å—Ç—Ä–∞–º", callback_data="view_filtered")]
    ])
    await callback.message.edit_text("–í—ã–±–µ—Ä–∏—Ç–µ —Å–ø–æ—Å–æ–± –ø—Ä–æ—Å–º–æ—Ç—Ä–∞:", reply_markup=keyboard)


@dp.callback_query(F.data == "view_all")
async def show_all_animals(callback: CallbackQuery):
    """ –û—Ç–æ–±—Ä–∞–∑–∏—Ç—å –≤—Å–µ—Ö –∂–∏–≤–æ—Ç–Ω—ã—Ö """
    animals = get_all_animals()
    if not animals:
        await callback.answer("–ñ–∏–≤–æ—Ç–Ω—ã—Ö –ø–æ–∫–∞ –Ω–µ—Ç –≤ –±–∞–∑–µ.", show_alert=True)
        return

    keyboard = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text=f"üêæ {animal['name']}", callback_data=f"animal_{animal['id']}")]
        for animal in animals
    ])
    await callback.message.edit_text("–í—Å–µ –¥–æ—Å—Ç—É–ø–Ω—ã–µ –∂–∏–≤–æ—Ç–Ω—ã–µ:", reply_markup=keyboard)


@dp.callback_query(F.data == "view_filtered")
async def choose_filters(callback: CallbackQuery):
    """ –ù–∞—Å—Ç—Ä–æ–∏—Ç—å —Ñ–∏–ª—å—Ç—Ä—ã """
    await callback.message.edit_text("–í—ã–±–µ—Ä–∏—Ç–µ —Ñ–∏–ª—å—Ç—Ä:", reply_markup=filters_keyboard())

@dp.callback_query(F.data == "exit_filters")
async def exit_filters(callback: CallbackQuery):
    """ –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é """
    await callback.message.edit_text("–í—ã –≤–µ—Ä–Ω—É–ª–∏—Å—å –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é.", reply_markup=main_keyboard())

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Ñ–∏–ª—å—Ç—Ä–æ–≤ –ø–æ —Ç–∏–ø—É –∏–ª–∏ –≤—ã–±–æ—Ä—É –æ–∫—Ä–∞—Å–∫–∏
@dp.callback_query(F.data.startswith("filter_"))
async def set_filter(callback: CallbackQuery):
    # –ò–∑–≤–ª–µ–∫–∞–µ–º –ø–∞—Ä–∞–º–µ—Ç—Ä —Ñ–∏–ª—å—Ç—Ä–∞ –∏–∑ callback data
    filter_param = callback.data.split("_")[1]
    if filter_param == "color":
        # –ï—Å–ª–∏ –≤—ã–±—Ä–∞–Ω —Ñ–∏–ª—å—Ç—Ä –ø–æ –æ–∫—Ä–∞—Å–∫–µ, –≤—ã–≤–æ–¥–∏–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –≤—ã–±–æ—Ä–∞ –æ–∫—Ä–∞—Å–æ–≤
        await callback.message.edit_text("–í—ã–±–µ—Ä–∏—Ç–µ –æ–∫—Ä–∞—Å:", reply_markup=color_keyboard())
        return

    # –ï—Å–ª–∏ –≤—ã–±—Ä–∞–Ω —Ñ–∏–ª—å—Ç—Ä –ø–æ —Ç–∏–ø—É, –Ω–∞–ø—Ä–∏–º–µ—Ä "cats" –∏–ª–∏ "dogs"
    # –ü—Ä–∏–≤–æ–¥–∏–º –∑–Ω–∞—á–µ–Ω–∏–µ –∫ –Ω—É–∂–Ω–æ–º—É —Ñ–æ—Ä–º–∞—Ç—É (–Ω–∞–ø—Ä–∏–º–µ—Ä, "cats" -> "cat")
    mapping = {
        "cats": "cat",
        "dogs": "dog",
        "cat": "cat",
        "dog": "dog"
    }
    filter_value = mapping.get(filter_param, filter_param)
    # –ü–æ–ª—É—á–∞–µ–º –∂–∏–≤–æ—Ç–Ω—ã—Ö –ø–æ —Ñ–∏–ª—å—Ç—Ä—É (—Ñ—É–Ω–∫—Ü–∏—è –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å —Ä–µ–∞–ª–∏–∑–æ–≤–∞–Ω–∞ –≤ db.py)
    animals = get_animals_by_filter(filter_value)
    if not animals:
        await callback.answer("–ü–æ —ç—Ç–æ–º—É —Ñ–∏–ª—å—Ç—Ä—É –∂–∏–≤–æ—Ç–Ω—ã—Ö –Ω–µ—Ç.", show_alert=True)
        return

    # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –∫–Ω–æ–ø–∫–∞–º–∏ –¥–ª—è –∫–∞–∂–¥–æ–≥–æ –Ω–∞–π–¥–µ–Ω–Ω–æ–≥–æ –∂–∏–≤–æ—Ç–Ω–æ–≥–æ
    keyboard = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text=f"üêæ {animal['name']}", callback_data=f"animal_{animal['id']}")]
        for animal in animals
    ])
    await callback.message.edit_text("–†–µ–∑—É–ª—å—Ç–∞—Ç—ã –ø–æ —Ñ–∏–ª—å—Ç—Ä—É:", reply_markup=keyboard)

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Ñ–∏–ª—å—Ç—Ä–∞ –ø–æ –æ–∫—Ä–∞—Å–∫–µ
@dp.callback_query(F.data.startswith("color_"))
async def filter_by_color(callback: CallbackQuery):
    # –ò–∑–≤–ª–µ–∫–∞–µ–º –≤—ã–±—Ä–∞–Ω–Ω—ã–π –æ–∫—Ä–∞—Å (–≤—Å–µ —Å–∏–º–≤–æ–ª—ã –ø–æ—Å–ª–µ –ø–µ—Ä–≤–æ–≥–æ –ø–æ–¥—á—ë—Ä–∫–∏–≤–∞–Ω–∏—è)
    color = callback.data.split("_", 1)[1]
    # –ü–æ–ª—É—á–∞–µ–º –∂–∏–≤–æ—Ç–Ω—ã—Ö –ø–æ –æ–∫—Ä–∞—Å–∫–µ (—Ñ—É–Ω–∫—Ü–∏—è –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å —Ä–µ–∞–ª–∏–∑–æ–≤–∞–Ω–∞ –≤ db.py)
    animals = get_animals_by_color(color)
    if not animals:
        await callback.answer("–ñ–∏–≤–æ—Ç–Ω—ã—Ö —Å —Ç–∞–∫–∏–º –æ–∫—Ä–∞—Å–æ–º –Ω–µ—Ç.", show_alert=True)
        return

    # –§–æ—Ä–º–∏—Ä—É–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –Ω–∞–π–¥–µ–Ω–Ω—ã—Ö –∂–∏–≤–æ—Ç–Ω—ã—Ö
    keyboard = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text=f"üêæ {animal['name']}", callback_data=f"animal_{animal['id']}")]
        for animal in animals
    ])
    await callback.message.edit_text(f"–ñ–∏–≤–æ—Ç–Ω—ã–µ —Å –æ–∫—Ä–∞—Å–æ–º {color}:", reply_markup=keyboard)

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ –≤—ã—Ö–æ–¥–∞ –∏–∑ —Ñ–∏–ª—å—Ç—Ä–æ–≤
@dp.callback_query(F.data == "exit_filters")
async def exit_filters(callback: CallbackQuery):
    # –§—É–Ω–∫—Ü–∏—è main_keyboard() –¥–æ–ª–∂–Ω–∞ –≤–æ–∑–≤—Ä–∞—â–∞—Ç—å –æ—Å–Ω–æ–≤–Ω–æ–µ –º–µ–Ω—é –≤–∞—à–µ–≥–æ –±–æ—Ç–∞
    await callback.message.edit_text("–í—ã –≤–µ—Ä–Ω—É–ª–∏—Å—å –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é.", reply_markup=main_keyboard())


@dp.callback_query(F.data.startswith("animal_"))
async def show_animal_details(callback: CallbackQuery):
    """ –ü–æ–∫–∞–∑–∞—Ç—å –¥–µ—Ç–∞–ª–∏ –∂–∏–≤–æ—Ç–Ω–æ–≥–æ """
    animal_id = int(callback.data.split("_")[1])
    animals = get_all_animals()
    animal = next((a for a in animals if a["id"] == animal_id), None)

    if animal:
        text = f"üêæ <b>{animal['name']}</b>\n" \
               f"üìÖ –í–æ–∑—Ä–∞—Å—Ç: {animal['age']}\n" \
               f"üé® –û–∫—Ä–∞—Å–∫–∞: {animal['color']}\n" \
               f"üìû –ö–æ–Ω—Ç–∞–∫—Ç—ã: {animal['contact']}"

        await callback.message.answer_photo(photo=animal['photo_url'], caption=text, parse_mode="HTML")
    else:
        await callback.answer("–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –∂–∏–≤–æ—Ç–Ω–æ–º –Ω–µ –Ω–∞–π–¥–µ–Ω–∞.", show_alert=True)


# –†–ê–°–°–´–õ–ö–ê

@dp.callback_query(lambda c: c.data == "manage_subscription")
async def manage_subscription(callback: CallbackQuery):
    user_id = callback.from_user.id
    # –í—ã–≤–æ–¥–∏–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –¥–æ—Å—Ç—É–ø–Ω—ã–º–∏ –æ–ø—Ü–∏—è–º–∏
    text = "–í—ã–±–µ—Ä–∏—Ç–µ –æ–ø—Ü–∏—é –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è —Ä–∞—Å—Å—ã–ª–∫–æ–π:"
    await callback.message.edit_text(text, reply_markup=subscription_keyboard())


@dp.callback_query(lambda c: c.data == "back_to_main")
async def back_to_main(callback: CallbackQuery):
    await callback.message.edit_text("–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", reply_markup=main_keyboard())


@dp.callback_query(F.data == 'toggle_subscription')
async def toggle_subscription_status(callback_query: CallbackQuery):
    user_id = callback_query.from_user.id
    current_status = get_subscription_status(user_id)  # –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â–∏–π —Å—Ç–∞—Ç—É—Å –∏–∑ –±–∞–∑—ã

    # –ü–µ—Ä–µ–∫–ª—é—á–∞–µ–º —Å—Ç–∞—Ç—É—Å
    new_status = 1 if current_status == 0 else 0
    update_subscription_status(user_id, new_status)  # –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å –≤ –ë–î

    status_message = "‚úÖ–†–∞—Å—Å—ã–ª–∫–∞ –≤–∫–ª—é—á–µ–Ω–∞.‚úÖ" if new_status == 1 else "‚ùå–†–∞—Å—Å—ã–ª–∫–∞ –≤—ã–∫–ª—é—á–µ–Ω–∞.‚ùå"

    # –†–µ–¥–∞–∫—Ç–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ, —á—Ç–æ–±—ã –æ—Ç–æ–±—Ä–∞–∑–∏—Ç—å –Ω–æ–≤—ã–π —Å—Ç–∞—Ç—É—Å
    await callback_query.message.edit_text(
        text=f"{status_message}\n\n–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–Ω–æ–ø–∫–∏ –Ω–∏–∂–µ –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è —Ä–∞—Å—Å—ã–ª–∫–æ–π.",
        reply_markup=subscription_keyboard()  # –û–±–Ω–æ–≤–ª–µ–Ω–Ω–∞—è –∫–ª–∞–≤–∏–∞—Ç—É—Ä–∞
    )

    # –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–∞–µ–º –Ω–∞–∂–∞—Ç–∏–µ callback
    await callback_query.answer(f"–°—Ç–∞—Ç—É—Å —Ä–∞—Å—Å—ã–ª–∫–∏ –∏–∑–º–µ–Ω–µ–Ω –Ω–∞: {status_message}")



#–î–û–ë–ê–í–ò–¢–¨/–£–î–ê–õ–ò–¢–¨ –ö–ê–ù–ê–õ
# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Ä–æ—É—Ç–µ—Ä–∞
router = Router()


class AddChannel(StatesGroup):
    wait_for_channel = State()  # –°–æ—Å—Ç–æ—è–Ω–∏–µ –æ–∂–∏–¥–∞–Ω–∏—è —Å—Å—ã–ª–∫–∏ –∫–∞–Ω–∞–ª–∞

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –∫–∞–Ω–∞–ª–∞
@router.callback_query(lambda c: c.data == 'add_channel')
async def add_channel(callback_query: CallbackQuery, state: FSMContext):
    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –ø—Ä–æ—Å—å–±–æ–π –≤–≤–µ—Å—Ç–∏ –∫–∞–Ω–∞–ª
    await callback_query.message.answer("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ —Å—Å—ã–ª–∫—É –Ω–∞ –∫–∞–Ω–∞–ª –∏–ª–∏ –≥—Ä—É–ø–ø—É (–Ω–∞–ø—Ä–∏–º–µ—Ä, @channel_name):")
    # –ü–µ—Ä–µ—Ö–æ–¥–∏–º –≤ —Ä–µ–∂–∏–º –æ–∂–∏–¥–∞–Ω–∏—è –∫–∞–Ω–∞–ª–∞
    await state.set_state(AddChannel.wait_for_channel)


# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∫–∞–Ω–∞–ª–∞, –∫–æ—Ç–æ—Ä—ã–π –±—ã–ª –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º
@router.message(StateFilter(AddChannel.wait_for_channel))  # –ù–æ–≤—ã–π —Å–ø–æ—Å–æ–± —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–∏ —Å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ–º StateFilter
async def process_channel(message: types.Message, state: FSMContext):
    channel_link = message.text.strip()

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–∞—á–∏–Ω–∞–µ—Ç—Å—è –ª–∏ —Å—Å—ã–ª–∫–∞ —Å '@'
    if not channel_link.startswith('@'):
        await message.reply("–°—Å—ã–ª–∫–∞ –Ω–∞ –∫–∞–Ω–∞–ª –¥–æ–ª–∂–Ω–∞ –Ω–∞—á–∏–Ω–∞—Ç—å—Å—è —Å '@'. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –ø—Ä–∞–≤–∏–ª—å–Ω—É—é —Å—Å—ã–ª–∫—É.")
        return

    # –ü—Ä–æ–≤–æ–¥–∏–º –ø—Ä–æ–≤–µ—Ä–∫—É, —á—Ç–æ–±—ã —É–±–µ–¥–∏—Ç—å—Å—è, —á—Ç–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —è–≤–ª—è–µ—Ç—Å—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º –≤ —ç—Ç–æ–º –∫–∞–Ω–∞–ª–µ
    try:
        chat = await bot.get_chat(channel_link)  # –ü—ã—Ç–∞–µ–º—Å—è –ø–æ–ª—É—á–∏—Ç—å —á–∞—Ç
        logging.info(f"Chat data: {chat}")
        member = await bot.get_chat_member(chat.id, message.from_user.id)
        logging.info(f"User data: {member}")

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç–∞—Ç—É—Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: –µ—Å–ª–∏ –æ–Ω –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä –∏–ª–∏ –≤–ª–∞–¥–µ–ª–µ—Ü, —Ç–æ –º–æ–∂–Ω–æ –¥–æ–±–∞–≤–ª—è—Ç—å –∫–∞–Ω–∞–ª
        if member.status not in ['administrator', 'creator']:  # 'creator' –∑–∞–º–µ–Ω–∏–ª–∏ –Ω–∞ 'owner'
            await message.reply("–£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞ –∏–ª–∏ –≤–ª–∞–¥–µ–ª—å—Ü–∞ –Ω–∞ —ç—Ç–æ–º –∫–∞–Ω–∞–ª–µ.")
            logging.warning(f"User {message.from_user.id} is not an admin or creator.")
            return

        # –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ –ø—Ä–æ–≤–µ—Ä—è–µ–º, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ —Å–∞–º –±–æ—Ç –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º –∫–∞–Ω–∞–ª–∞
        bot_member = await bot.get_chat_member(chat.id, bot.id)
        logging.info(f"Bot status: {bot_member.status}")
        if bot_member.status not in ['administrator', 'creator']:  # 'creator' –∑–∞–º–µ–Ω–∏–ª–∏ –Ω–∞ 'owner'
            await message.reply("–ë–æ—Ç –Ω–µ —è–≤–ª—è–µ—Ç—Å—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º —ç—Ç–æ–≥–æ –∫–∞–Ω–∞–ª–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –¥–æ–±–∞–≤—å—Ç–µ –±–æ—Ç–∞ –∫–∞–∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞.")
            logging.warning(f"Bot is not an admin or creator in channel {channel_link}.")
            return

    except Exception as e:
        await message.reply(f"–ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏ –∫–∞–Ω–∞–ª. –û—à–∏–±–∫–∞: {str(e)}")
        logging.error(f"Error when checking channel: {str(e)}")
        return

    # –î–æ–±–∞–≤–ª—è–µ–º –∫–∞–Ω–∞–ª –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö
    user_id = message.from_user.id
    add_channel_to_db(user_id, channel_link)

    # –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–∞–µ–º –¥–æ–±–∞–≤–ª–µ–Ω–∏–µ
    await message.reply(f"–ö–∞–Ω–∞–ª {channel_link} —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω.")

    # –ó–∞–≤–µ—Ä—à–∞–µ–º –ø—Ä–æ—Ü–µ—Å—Å
    await state.clear()  # –ò—Å–ø–æ–ª—å–∑—É–µ–º clear() –≤–º–µ—Å—Ç–æ finish()


# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è –∫–∞–Ω–∞–ª–∞
@router.callback_query(lambda c: c.data == 'remove_channel')
async def remove_channel(callback_query: CallbackQuery):
    user_id = callback_query.from_user.id

    # –ü–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ –∫–∞–Ω–∞–ª–æ–≤ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
    channels = get_user_channels(user_id)

    if not channels:
        await callback_query.message.answer("–£ –≤–∞—Å –Ω–µ—Ç –¥–æ–±–∞–≤–ª–µ–Ω–Ω—ã—Ö –∫–∞–Ω–∞–ª–æ–≤ –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è.")
        return

    # –§–æ—Ä–º–∏—Ä—É–µ–º —Å–ø–∏—Å–æ–∫ –¥–ª—è –≤—ã–±–æ—Ä–∞ –∫–∞–Ω–∞–ª–∞
    keyboard = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text=channel, callback_data=f"remove_{channel}")]
        for channel in channels
    ])

    await callback_query.message.answer("–í—ã–±–µ—Ä–∏—Ç–µ –∫–∞–Ω–∞–ª –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è:", reply_markup=keyboard)


# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è –≤—ã–±—Ä–∞–Ω–Ω–æ–≥–æ –∫–∞–Ω–∞–ª–∞
@router.callback_query(lambda c: c.data.startswith('remove_'))
async def process_channel_removal(callback_query: CallbackQuery):
    user_id = callback_query.from_user.id
    channel_to_remove = callback_query.data[len("remove_"):]

    # –£–¥–∞–ª—è–µ–º –∫–∞–Ω–∞–ª –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
    remove_channel_from_db(user_id, channel_to_remove)

    # –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–∞–µ–º —É–¥–∞–ª–µ–Ω–∏–µ
    await callback_query.message.answer(f"–ö–∞–Ω–∞–ª {channel_to_remove} —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω.")


dp.include_router(router)  # –≠—Ç–æ –¥–æ–±–∞–≤–∏—Ç –≤—Å–µ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –∏–∑ router –≤ –¥–∏—Å–ø–µ—Ç—á–µ—Ä






# ======================== –õ–û–ì–ò–†–û–í–ê–ù–ò–ï  ========================



# ======================== –ó–ê–ü–£–°–ö –ë–û–¢–ê ========================

async def main():
    init_db()
    await dp.start_polling(bot)


if __name__ == "__main__":
    asyncio.run(main())
