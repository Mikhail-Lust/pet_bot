import sqlite3
import asyncio
import logging
import re
from aiogram import Bot, Dispatcher, Router
from aiogram.filters import CommandStart
from aiogram.types import Message, InlineKeyboardButton, InlineKeyboardMarkup, CallbackQuery
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import State, StatesGroup
from aiogram.fsm.storage.memory import MemoryStorage
from dotenv import load_dotenv
import os

logging.basicConfig(
    level=logging.INFO,
    format='%(asctime)s - %(levelname)s - %(message)s',
    handlers=[
        logging.StreamHandler(),
        logging.FileHandler('bot.log', encoding='utf-8')  # ‚Üê —è–≤–Ω–æ –∑–∞–¥–∞–µ–º –∫–æ–¥–∏—Ä–æ–≤–∫—É
    ]
)

# –ó–∞–≥—Ä—É–∑–∫–∞ —Ç–æ–∫–µ–Ω–∞ –∏–∑ .env
load_dotenv()
TOKEN = os.getenv("TOKEN")
if TOKEN is None:
    raise ValueError("–ü–µ—Ä–µ–º–µ–Ω–Ω–∞—è –æ–∫—Ä—É–∂–µ–Ω–∏—è TOKEN –Ω–µ –Ω–∞–π–¥–µ–Ω–∞! –ü—Ä–æ–≤–µ—Ä—å—Ç–µ —Ñ–∞–π–ª .env.")

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–æ—Ç–∞ –∏ –¥–∏—Å–ø–µ—Ç—á–µ—Ä–∞
bot = Bot(token=TOKEN)
dp = Dispatcher(storage=MemoryStorage())
router = Router()

# –ü—É—Ç—å –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
DB_PATH = os.path.join(os.path.dirname(__file__), 'pets.db')

# –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
def get_db_connection():
    return sqlite3.connect(DB_PATH)

# –ö–ª–∞—Å—Å—ã –¥–ª—è FSM
class FilterStates(StatesGroup):
    waiting_min_age = State()
    waiting_max_age = State()
    waiting_sex = State()
    waiting_name = State()

# –ù–æ—Ä–º–∞–ª–∏–∑–∞—Ü–∏—è –≤–æ–∑—Ä–∞—Å—Ç–∞
def normalize_age(age_str):
    """–ò–∑–≤–ª–µ—á—å —á–∏—Å–ª–æ–≤–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ –≤–æ–∑—Ä–∞—Å—Ç–∞ –∏–∑ —Å—Ç—Ä–æ–∫–∏"""
    if not age_str or age_str.lower() in ["–Ω–µ —É–∫–∞–∑–∞–Ω", "", "unknown"]:
        logging.debug(f"–í–æ–∑—Ä–∞—Å—Ç –Ω–µ —É–∫–∞–∑–∞–Ω: {age_str}")
        return None
    # –ò–∑–≤–ª–µ–∫–∞–µ–º –ø–µ—Ä–≤–æ–µ —Ü–µ–ª–æ–µ —á–∏—Å–ª–æ (–Ω–∞–ø—Ä–∏–º–µ—Ä, "–æ–∫–æ–ª–æ 1" ‚Üí 1, "2 –≥–æ–¥–∞" ‚Üí 2)
    match = re.search(r'\d+', age_str)
    if match:
        age = int(match.group())
        logging.debug(f"–ù–æ—Ä–º–∞–ª–∏–∑–æ–≤–∞–Ω–Ω—ã–π –≤–æ–∑—Ä–∞—Å—Ç: {age_str} ‚Üí {age}")
        return age
    logging.debug(f"–ù–µ —É–¥–∞–ª–æ—Å—å –Ω–æ—Ä–º–∞–ª–∏–∑–æ–≤–∞—Ç—å –≤–æ–∑—Ä–∞—Å—Ç: {age_str}")
    return None

# –ù–æ—Ä–º–∞–ª–∏–∑–∞—Ü–∏—è –ø–æ–ª–∞
def normalize_sex(sex_str):
    """–ü—Ä–∏–≤–µ—Å—Ç–∏ –∑–Ω–∞—á–µ–Ω–∏–µ –ø–æ–ª–∞ –∫ '–ú—É–∂—Å–∫–æ–π' –∏–ª–∏ '–ñ–µ–Ω—Å–∫–∏–π'"""
    if not sex_str or sex_str.lower() in ["–Ω–µ —É–∫–∞–∑–∞–Ω", "", "unknown"]:
        logging.debug(f"–ü–æ–ª –Ω–µ —É–∫–∞–∑–∞–Ω: {sex_str}")
        return None
    sex_str = sex_str.lower()
    male_keywords = ["–º—É–∂—Å–∫–æ–π", "—Å–∞–º–µ—Ü", "male", "boy", "–º", "‚ôÇ"]
    female_keywords = ["–∂–µ–Ω—Å–∫–∏–π", "—Å–∞–º–∫–∞", "female", "girl", "–∂", "‚ôÄ"]
    if any(keyword in sex_str for keyword in male_keywords):
        logging.debug(f"–ù–æ—Ä–º–∞–ª–∏–∑–æ–≤–∞–Ω–Ω—ã–π –ø–æ–ª: {sex_str} ‚Üí –ú—É–∂—Å–∫–æ–π")
        return "–ú—É–∂—Å–∫–æ–π"
    if any(keyword in sex_str for keyword in female_keywords):
        logging.debug(f"–ù–æ—Ä–º–∞–ª–∏–∑–æ–≤–∞–Ω–Ω—ã–π –ø–æ–ª: {sex_str} ‚Üí –ñ–µ–Ω—Å–∫–∏–π")
        return "–ñ–µ–Ω—Å–∫–∏–π"
    logging.debug(f"–ù–µ —É–¥–∞–ª–æ—Å—å –Ω–æ—Ä–º–∞–ª–∏–∑–æ–≤–∞—Ç—å –ø–æ–ª: {sex_str}")
    return None

# ======================== –ö–ª–∞–≤–∏–∞—Ç—É—Ä—ã ========================

def main_keyboard():
    """–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é"""
    return InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="üìã –í—Å–µ –∂–∏–≤–æ—Ç–Ω—ã–µ", callback_data="view_all")],
        [InlineKeyboardButton(text="üîç –§–∏–ª—å—Ç—Ä—ã", callback_data="view_filtered")]
    ])

def filters_keyboard(selected_filters: dict) -> InlineKeyboardMarkup:
    """–ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –≤—ã–±–æ—Ä–∞ —Ñ–∏–ª—å—Ç—Ä–æ–≤ —Å –æ—Ç–º–µ—Ç–∫–∞–º–∏"""
    def mark_selected(text, key):
        if key == "age":
            age_selected = "age_min" in selected_filters and "age_max" in selected_filters
            return f"‚úî {text}" if age_selected else text
        return f"‚úî {text}" if key in selected_filters else text

    return InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text=mark_selected("üìÖ –í–æ–∑—Ä–∞—Å—Ç", "age"), callback_data="filter_age")],
        [InlineKeyboardButton(text=mark_selected("‚ö§ –ü–æ–ª", "sex"), callback_data="filter_sex")],
        [InlineKeyboardButton(text=mark_selected("üîé –ò–º—è", "name"), callback_data="filter_name")],
        [InlineKeyboardButton(text="‚úÖ –ü–æ–∫–∞–∑–∞—Ç—å", callback_data="show_filtered")],
        [InlineKeyboardButton(text="üîô –ù–∞–∑–∞–¥", callback_data="back_to_main")]
    ])

def sex_keyboard() -> InlineKeyboardMarkup:
    """–ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –≤—ã–±–æ—Ä–∞ –ø–æ–ª–∞"""
    return InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="–ú—É–∂—Å–∫–æ–π", callback_data="sex_–ú—É–∂—Å–∫–æ–π")],
        [InlineKeyboardButton(text="–ñ–µ–Ω—Å–∫–∏–π", callback_data="sex_–ñ–µ–Ω—Å–∫–∏–π")],
        [InlineKeyboardButton(text="üîô –ù–∞–∑–∞–¥", callback_data="back_to_filters")]
    ])

def age_keyboard(start_age: int, end_age: int, mode: str) -> InlineKeyboardMarkup:
    """–ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –¥–ª—è –≤—ã–±–æ—Ä–∞ –≤–æ–∑—Ä–∞—Å—Ç–∞"""
    buttons = [[]]  # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º —Å –ø—É—Å—Ç—ã–º —Å–ø–∏—Å–∫–æ–º
    if end_age < start_age:
        logging.warning(f"–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –¥–∏–∞–ø–∞–∑–æ–Ω –≤–æ–∑—Ä–∞—Å—Ç–∞: start={start_age}, end={end_age}")
        end_age = start_age
    for age in range(start_age, end_age + 1):
        if len(buttons[-1]) >= 3:  # –ù–æ–≤–∞—è —Å—Ç—Ä–æ–∫–∞ –ø–æ—Å–ª–µ 3 –∫–Ω–æ–ø–æ–∫
            buttons.append([])
        callback_data = f"age_{mode}_{age}"
        buttons[-1].append(InlineKeyboardButton(text=str(age), callback_data=callback_data))
    buttons.append([InlineKeyboardButton(text="üîô –ù–∞–∑–∞–¥", callback_data="back_to_filters")])
    return InlineKeyboardMarkup(inline_keyboard=buttons)

# ======================== –§—É–Ω–∫—Ü–∏–∏ —Ä–∞–±–æ—Ç—ã —Å –±–∞–∑–æ–π –¥–∞–Ω–Ω—ã—Ö ========================

def get_all_animals():
    """–ü–æ–ª—É—á–∏—Ç—å –≤—Å–µ—Ö –∂–∏–≤–æ—Ç–Ω—ã—Ö –∏–∑ –±–∞–∑—ã"""
    try:
        conn = get_db_connection()
        c = conn.cursor()
        c.execute("SELECT id, name, age, sex, photo_url, description FROM animals")
        animals = [{"id": row[0], "name": row[1], "age": row[2], "sex": row[3],
                    "photo_url": row[4], "description": row[5]} for row in c.fetchall()]
        conn.close()
        logging.info(f"–ü–æ–ª—É—á–µ–Ω–æ {len(animals)} –∂–∏–≤–æ—Ç–Ω—ã—Ö –∏–∑ –±–∞–∑—ã")
        return animals
    except sqlite3.Error as e:
        logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –≤—Å–µ—Ö –∂–∏–≤–æ—Ç–Ω—ã—Ö: {e}")
        return []

def get_animals_by_filters(filters: dict):
    """–ü–æ–ª—É—á–∏—Ç—å –∂–∏–≤–æ—Ç–Ω—ã—Ö –ø–æ —Ñ–∏–ª—å—Ç—Ä–∞–º"""
    try:
        conn = get_db_connection()
        c = conn.cursor()
        query = "SELECT id, name, age, sex, photo_url, description FROM animals WHERE 1=1"
        params = []

        # –§–∏–ª—å—Ç—Ä –ø–æ –∏–º–µ–Ω–∏
        if "name" in filters:
            query += " AND name LIKE ?"
            params.append(f"%{filters['name']}%")
            logging.info(f"–ü—Ä–∏–º–µ–Ω—ë–Ω —Ñ–∏–ª—å—Ç—Ä –ø–æ –∏–º–µ–Ω–∏: {filters['name']}")

        # –§–∏–ª—å—Ç—Ä –ø–æ –ø–æ–ª—É
        if "sex" in filters:
            query += " AND sex = ?"
            params.append(filters["sex"])
            logging.info(f"–ü—Ä–∏–º–µ–Ω—ë–Ω —Ñ–∏–ª—å—Ç—Ä –ø–æ –ø–æ–ª—É: {filters['sex']}")

        c.execute(query, params)
        animals = [{"id": row[0], "name": row[1], "age": row[2], "sex": row[3],
                    "photo_url": row[4], "description": row[5]} for row in c.fetchall()]
        logging.info(f"–ù–∞–π–¥–µ–Ω–æ {len(animals)} –∂–∏–≤–æ—Ç–Ω—ã—Ö –ø–æ—Å–ª–µ SQL-—Ñ–∏–ª—å—Ç—Ä–æ–≤")

        # –§–∏–ª—å—Ç—Ä –ø–æ –≤–æ–∑—Ä–∞—Å—Ç—É (–≤ –ø–∞–º—è—Ç–∏)
        if "age_min" in filters and "age_max" in filters:
            age_min = filters["age_min"]
            age_max = filters["age_max"]
            filtered_animals = []
            for animal in animals:
                age = normalize_age(animal["age"])
                if age is not None and age_min <= age <= age_max:
                    filtered_animals.append(animal)
            animals = filtered_animals
            logging.info(f"–ü–æ—Å–ª–µ —Ñ–∏–ª—å—Ç—Ä–∞ –ø–æ –≤–æ–∑—Ä–∞—Å—Ç—É ({age_min}-{age_max}): {len(animals)} –∂–∏–≤–æ—Ç–Ω—ã—Ö")

        # –ù–æ—Ä–º–∞–ª–∏–∑–∞—Ü–∏—è –ø–æ–ª–∞ –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è
        for animal in animals:
            animal["sex"] = normalize_sex(animal["sex"]) or "–ù–µ —É–∫–∞–∑–∞–Ω"

        conn.close()
        return animals
    except sqlite3.Error as e:
        logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–∏ –∂–∏–≤–æ—Ç–Ω—ã—Ö: {e}")
        return []

def get_max_age():
    """–ü–æ–ª—É—á–∏—Ç—å –º–∞–∫—Å–∏–º–∞–ª—å–Ω—ã–π –≤–æ–∑—Ä–∞—Å—Ç –∏–∑ –±–∞–∑—ã"""
    try:
        conn = get_db_connection()
        c = conn.cursor()
        c.execute("SELECT age FROM animals")
        ages = [normalize_age(row[0]) for row in c.fetchall() if normalize_age(row[0]) is not None]
        conn.close()
        max_age = max(ages) if ages else 10
        logging.info(f"–ú–∞–∫—Å–∏–º–∞–ª—å–Ω—ã–π –≤–æ–∑—Ä–∞—Å—Ç: {max_age}")
        return max_age
    except sqlite3.Error as e:
        logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–≥–æ –≤–æ–∑—Ä–∞—Å—Ç–∞: {e}")
        return 10

# ======================== –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ ========================

@router.message(CommandStart())
async def start(message: Message):
    """–°—Ç–∞—Ä—Ç–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ"""
    await message.answer("–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å! –≠—Ç–æ—Ç –±–æ—Ç –ø–æ–º–æ–≥–∞–µ—Ç –Ω–∞–π—Ç–∏ –ø–∏—Ç–æ–º—Ü–µ–≤ –∏–∑ –ø—Ä–∏—é—Ç–∞.",
                        reply_markup=main_keyboard())

@router.callback_query(lambda c: c.data == "view_all")
async def show_all_animals(callback: CallbackQuery, state: FSMContext):
    """–ü–æ–∫–∞–∑–∞—Ç—å –≤—Å–µ—Ö –∂–∏–≤–æ—Ç–Ω—ã—Ö"""
    animals = get_all_animals()
    if not animals:
        await callback.answer("–ñ–∏–≤–æ—Ç–Ω—ã—Ö –ø–æ–∫–∞ –Ω–µ—Ç –≤ –±–∞–∑–µ.", show_alert=True)
        return

    keyboard = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text=f"üêæ {animal['name']}", callback_data=f"animal_{animal['id']}")]
        for animal in animals
    ])
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ —Å–ø–∏—Å–∫–∞
    await state.update_data(list_type="view_all")
    logging.info("–ü–æ–∫–∞–∑–∞–Ω –ø–æ–ª–Ω—ã–π —Å–ø–∏—Å–æ–∫ –∂–∏–≤–æ—Ç–Ω—ã—Ö")
    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –Ω–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
    await callback.message.answer("–í—Å–µ –¥–æ—Å—Ç—É–ø–Ω—ã–µ –∂–∏–≤–æ—Ç–Ω—ã–µ:", reply_markup=keyboard)

@router.callback_query(lambda c: c.data == "view_filtered")
async def choose_filters(callback: CallbackQuery, state: FSMContext):
    """–û—Ç–∫—Ä—ã—Ç—å –º–µ–Ω—é –≤—ã–±–æ—Ä–∞ —Ñ–∏–ª—å—Ç—Ä–æ–≤"""
    data = await state.get_data()
    selected_filters = data.get("filters", {})
    logging.info(f"–¢–µ–∫—É—â–∏–µ —Ñ–∏–ª—å—Ç—Ä—ã: {selected_filters}")
    await callback.message.edit_text("–í—ã–±–µ—Ä–∏—Ç–µ —Ñ–∏–ª—å—Ç—Ä:", reply_markup=filters_keyboard(selected_filters))

@router.callback_query(lambda c: c.data == "back_to_main")
async def back_to_main(callback: CallbackQuery, state: FSMContext):
    """–í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é"""
    await state.clear()
    await callback.message.edit_text("–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é:", reply_markup=main_keyboard())

@router.callback_query(lambda c: c.data == "filter_sex")
async def start_sex_filter(callback: CallbackQuery, state: FSMContext):
    """–ù–∞—á–∞—Ç—å –≤—ã–±–æ—Ä –ø–æ–ª–∞"""
    await callback.message.edit_text("–í—ã–±–µ—Ä–∏—Ç–µ –ø–æ–ª:", reply_markup=sex_keyboard())
    await state.set_state(FilterStates.waiting_sex)

@router.callback_query(lambda c: c.data.startswith("sex_"))
async def set_sex(callback: CallbackQuery, state: FSMContext):
    """–£—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –ø–æ–ª –≤ —Ñ–∏–ª—å—Ç—Ä–∞—Ö"""
    sex = callback.data.split("_")[1]
    data = await state.get_data()
    filters = data.get("filters", {})
    filters["sex"] = sex
    await state.update_data(filters=filters)
    logging.info(f"–£—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω —Ñ–∏–ª—å—Ç—Ä –ø–æ–ª–∞: {sex}")
    await callback.message.edit_text("–í—ã–±–µ—Ä–∏—Ç–µ —Ñ–∏–ª—å—Ç—Ä:", reply_markup=filters_keyboard(filters))
    await state.set_state(None)

@router.callback_query(lambda c: c.data == "filter_age")
async def start_age_filter(callback: CallbackQuery, state: FSMContext):
    """–ù–∞—á–∞—Ç—å –≤—ã–±–æ—Ä –≤–æ–∑—Ä–∞—Å—Ç–∞"""
    max_age = get_max_age()
    if max_age <= 0:
        await callback.answer("–ù–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –≤–æ–∑—Ä–∞—Å—Ç–æ–≤ –¥–ª—è —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–∏.", show_alert=True)
        return
    await state.update_data(age_min=None, age_max=None)
    await callback.message.edit_text("–í—ã–±–µ—Ä–∏—Ç–µ –º–∏–Ω–∏–º–∞–ª—å–Ω—ã–π –≤–æ–∑—Ä–∞—Å—Ç:",
                                    reply_markup=age_keyboard(0, max_age, "min"))
    await state.set_state(FilterStates.waiting_min_age)

@router.callback_query(lambda c: c.data.startswith("age_min_"))
async def set_min_age(callback: CallbackQuery, state: FSMContext):
    """–£—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –º–∏–Ω–∏–º–∞–ª—å–Ω—ã–π –≤–æ–∑—Ä–∞—Å—Ç"""
    min_age = int(callback.data.split("_")[2])
    await state.update_data(age_min=min_age)
    max_age = get_max_age()
    if max_age <= min_age:
        await callback.answer("–ú–∞–∫—Å–∏–º–∞–ª—å–Ω—ã–π –≤–æ–∑—Ä–∞—Å—Ç –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –±–æ–ª—å—à–µ –º–∏–Ω–∏–º–∞–ª—å–Ω–æ–≥–æ.", show_alert=True)
        return
    logging.info(f"–£—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –º–∏–Ω–∏–º–∞–ª—å–Ω—ã–π –≤–æ–∑—Ä–∞—Å—Ç: {min_age}")
    await callback.message.edit_text("–í—ã–±–µ—Ä–∏—Ç–µ –º–∞–∫—Å–∏–º–∞–ª—å–Ω—ã–π –≤–æ–∑—Ä–∞—Å—Ç:",
                                    reply_markup=age_keyboard(min_age, max_age, "max"))
    await state.set_state(FilterStates.waiting_max_age)

@router.callback_query(lambda c: c.data.startswith("age_max_"))
async def set_max_age(callback: CallbackQuery, state: FSMContext):
    """–£—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –º–∞–∫—Å–∏–º–∞–ª—å–Ω—ã–π –≤–æ–∑—Ä–∞—Å—Ç"""
    data = await state.get_data()
    min_age = data.get("age_min", 0)
    max_age = int(callback.data.split("_")[2])

    if max_age < min_age:
        await callback.answer("–ú–∞–∫—Å–∏–º–∞–ª—å–Ω—ã–π –≤–æ–∑—Ä–∞—Å—Ç –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –±–æ–ª—å—à–µ –º–∏–Ω–∏–º–∞–ª—å–Ω–æ–≥–æ!", show_alert=True)
        return

    filters = data.get("filters", {})
    filters["age_min"] = min_age
    filters["age_max"] = max_age
    await state.update_data(filters=filters)
    logging.info(f"–£—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –¥–∏–∞–ø–∞–∑–æ–Ω –≤–æ–∑—Ä–∞—Å—Ç–∞: {min_age}-{max_age}")
    await callback.message.edit_text("–í—ã–±–µ—Ä–∏—Ç–µ —Ñ–∏–ª—å—Ç—Ä:", reply_markup=filters_keyboard(filters))
    await state.set_state(None)

@router.callback_query(lambda c: c.data == "filter_name")
async def start_name_filter(callback: CallbackQuery, state: FSMContext):
    """–ù–∞—á–∞—Ç—å –ø–æ–∏—Å–∫ –ø–æ –∏–º–µ–Ω–∏"""
    await callback.message.edit_text("–í–≤–µ–¥–∏—Ç–µ –∏–º—è –∂–∏–≤–æ—Ç–Ω–æ–≥–æ (–∏–ª–∏ —á–∞—Å—Ç—å –∏–º–µ–Ω–∏):")
    await state.set_state(FilterStates.waiting_name)

@router.message(FilterStates.waiting_name)
async def set_name(message: Message, state: FSMContext):
    """–£—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –∏–º—è –≤ —Ñ–∏–ª—å—Ç—Ä–∞—Ö"""
    name = message.text.strip()
    if not name:
        await message.answer("–ò–º—è –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –ø—É—Å—Ç—ã–º. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.")
        return

    data = await state.get_data()
    filters = data.get("filters", {})
    filters["name"] = name
    await state.update_data(filters=filters)
    logging.info(f"–£—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω —Ñ–∏–ª—å—Ç—Ä –∏–º–µ–Ω–∏: {name}")
    await message.answer("–§–∏–ª—å—Ç—Ä –ø–æ –∏–º–µ–Ω–∏ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω. –í—ã–±–µ—Ä–∏—Ç–µ —Å–ª–µ–¥—É—é—â–∏–π —Ñ–∏–ª—å—Ç—Ä:",
                        reply_markup=filters_keyboard(filters))
    await state.set_state(None)

@router.callback_query(lambda c: c.data == "back_to_filters")
async def back_to_filters(callback: CallbackQuery, state: FSMContext):
    """–í–µ—Ä–Ω—É—Ç—å—Å—è –∫ –≤—ã–±–æ—Ä—É —Ñ–∏–ª—å—Ç—Ä–æ–≤"""
    data = await state.get_data()
    filters = data.get("filters", {})
    await callback.message.edit_text("–í—ã–±–µ—Ä–∏—Ç–µ —Ñ–∏–ª—å—Ç—Ä:", reply_markup=filters_keyboard(filters))
    await state.set_state(None)

@router.callback_query(lambda c: c.data == "show_filtered")
async def show_filtered(callback: CallbackQuery, state: FSMContext):
    """–ü–æ–∫–∞–∑–∞—Ç—å –∂–∏–≤–æ—Ç–Ω—ã—Ö –ø–æ —Ñ–∏–ª—å—Ç—Ä–∞–º"""
    data = await state.get_data()
    filters = data.get("filters", {})
    logging.info(f"–ü—Ä–∏–º–µ–Ω–µ–Ω–∏–µ —Ñ–∏–ª—å—Ç—Ä–æ–≤: {filters}")

    if not filters:
        await callback.answer("–í—ã–±–µ—Ä–∏—Ç–µ —Ö–æ—Ç—è –±—ã –æ–¥–∏–Ω —Ñ–∏–ª—å—Ç—Ä!", show_alert=True)
        return

    animals = get_animals_by_filters(filters)
    if not animals:
        await callback.answer("–ñ–∏–≤–æ—Ç–Ω—ã–µ –ø–æ —ç—Ç–∏–º —Ñ–∏–ª—å—Ç—Ä–∞–º –Ω–µ –Ω–∞–π–¥–µ–Ω—ã.", show_alert=True)
        return

    keyboard = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text=f"üêæ {animal['name']}", callback_data=f"animal_{animal['id']}")]
        for animal in animals
    ])
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ —Å–ø–∏—Å–∫–∞
    await state.update_data(list_type="show_filtered", filters=filters)
    logging.info("–ü–æ–∫–∞–∑–∞–Ω –æ—Ç—Ñ–∏–ª—å—Ç—Ä–æ–≤–∞–Ω–Ω—ã–π —Å–ø–∏—Å–æ–∫ –∂–∏–≤–æ—Ç–Ω—ã—Ö")
    await callback.message.edit_text("–†–µ–∑—É–ª—å—Ç–∞—Ç—ã –ø–æ —Ñ–∏–ª—å—Ç—Ä–∞–º:", reply_markup=keyboard)

@router.callback_query(lambda c: c.data.startswith("animal_"))
async def show_animal_details(callback: CallbackQuery, state: FSMContext):
    """–ü–æ–∫–∞–∑–∞—Ç—å –¥–µ—Ç–∞–ª–∏ –∂–∏–≤–æ—Ç–Ω–æ–≥–æ —Å –∫—Ä–∞—Å–∏–≤–æ–π —Ä–∞–∑–º–µ—Ç–∫–æ–π"""
    animal_id = int(callback.data.split("_")[1])
    animals = get_all_animals()
    animal = next((a for a in animals if a["id"] == animal_id), None)

    if animal:
        # –§–æ—Ä–º–∏—Ä—É–µ–º –∫—Ä–∞—Å–∏–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å HTML-—Ä–∞–∑–º–µ—Ç–∫–æ–π (–±–µ–∑ description)
        text = (
            f"üêæ <b>{animal['name']}</b>\n\n"
            f"üìÖ <b>–í–æ–∑—Ä–∞—Å—Ç:</b> {animal['age']}\n"
            f"‚ö§ <b>–ü–æ–ª:</b> {animal['sex']}"
        )

        # –°–æ–∑–¥–∞—ë–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –∫–Ω–æ–ø–∫–∞–º–∏
        keyboard = InlineKeyboardMarkup(inline_keyboard=[
            [InlineKeyboardButton(text="üåê –ü–µ—Ä–µ–π—Ç–∏ –Ω–∞ —Å–∞–π—Ç", url=animal['description'] if animal['description'].startswith('http') else 'https://less-homeless.com')],
            [InlineKeyboardButton(text="üîô –ù–∞–∑–∞–¥ –∫ —Å–ø–∏—Å–∫—É", callback_data="back_to_list")]
        ])

        try:
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ñ–æ—Ç–æ —Å –ø–æ–¥–ø–∏—Å—å—é –∏ —Å–æ—Ö—Ä–∞–Ω—è–µ–º ID —Å–æ–æ–±—â–µ–Ω–∏—è
            sent_message = await callback.message.answer_photo(
                photo=animal['photo_url'],
                caption=text,
                parse_mode="HTML",
                reply_markup=keyboard
            )
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º ID —Å–æ–æ–±—â–µ–Ω–∏—è —Å –∫–∞—Ä—Ç–æ—á–∫–æ–π
            await state.update_data(card_message_id=sent_message.message_id)
            # –£–¥–∞–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å–æ —Å–ø–∏—Å–∫–æ–º
            await callback.message.delete()
        except Exception as e:
            logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Ñ–æ—Ç–æ: {e}")
            # –ï—Å–ª–∏ —Ñ–æ—Ç–æ –Ω–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å, –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ç–µ–∫—Å—Ç
            sent_message = await callback.message.answer(
                text=text,
                parse_mode="HTML",
                reply_markup=keyboard
            )
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º ID —Å–æ–æ–±—â–µ–Ω–∏—è —Å –∫–∞—Ä—Ç–æ—á–∫–æ–π
            await state.update_data(card_message_id=sent_message.message_id)
            # –£–¥–∞–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å–æ —Å–ø–∏—Å–∫–æ–º
            await callback.message.delete()
    else:
        await callback.answer("–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –∂–∏–≤–æ—Ç–Ω–æ–º –Ω–µ –Ω–∞–π–¥–µ–Ω–∞.", show_alert=True)

@router.callback_query(lambda c: c.data == "back_to_list")
async def back_to_list(callback: CallbackQuery, state: FSMContext):
    """–í–µ—Ä–Ω—É—Ç—å—Å—è –∫ –ø—Ä–µ–¥—ã–¥—É—â–µ–º—É —Å–ø–∏—Å–∫—É (–ø–æ–ª–Ω–æ–º—É –∏–ª–∏ –æ—Ç—Ñ–∏–ª—å—Ç—Ä–æ–≤–∞–Ω–Ω–æ–º—É)"""
    data = await state.get_data()
    list_type = data.get("list_type", "view_all")
    card_message_id = data.get("card_message_id")

    # –£–¥–∞–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∫–∞—Ä—Ç–æ—á–∫–æ–π –ø–∏—Ç–æ–º—Ü–∞
    if card_message_id:
        try:
            await bot.delete_message(chat_id=callback.message.chat.id, message_id=card_message_id)
        except Exception as e:
            logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ –∫–∞—Ä—Ç–æ—á–∫–∏ –ø–∏—Ç–æ–º—Ü–∞: {e}")

    if list_type == "show_filtered":
        filters = data.get("filters", {})
        animals = get_animals_by_filters(filters)
        if not animals:
            await callback.message.answer("–ñ–∏–≤–æ—Ç–Ω—ã–µ –ø–æ —ç—Ç–∏–º —Ñ–∏–ª—å—Ç—Ä–∞–º –Ω–µ –Ω–∞–π–¥–µ–Ω—ã.")
            return
        keyboard = InlineKeyboardMarkup(inline_keyboard=[
            [InlineKeyboardButton(text=f"üêæ {animal['name']}", callback_data=f"animal_{animal['id']}")]
            for animal in animals
        ])
        await callback.message.answer("–†–µ–∑—É–ª—å—Ç–∞—Ç—ã –ø–æ —Ñ–∏–ª—å—Ç—Ä–∞–º:", reply_markup=keyboard)
        logging.info(f"–í–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –æ—Ç—Ñ–∏–ª—å—Ç—Ä–æ–≤–∞–Ω–Ω—ã–π —Å–ø–∏—Å–æ–∫ —Å —Ñ–∏–ª—å—Ç—Ä–∞–º–∏: {filters}")
    else:
        animals = get_all_animals()
        if not animals:
            await callback.message.answer("–ñ–∏–≤–æ—Ç–Ω—ã—Ö –ø–æ–∫–∞ –Ω–µ—Ç –≤ –±–∞–∑–µ.")
            return
        keyboard = InlineKeyboardMarkup(inline_keyboard=[
            [InlineKeyboardButton(text=f"üêæ {animal['name']}", callback_data=f"animal_{animal['id']}")]
            for animal in animals
        ])
        await callback.message.answer("–í—Å–µ –¥–æ—Å—Ç—É–ø–Ω—ã–µ –∂–∏–≤–æ—Ç–Ω—ã–µ:", reply_markup=keyboard)
        logging.info("–í–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –ø–æ–ª–Ω—ã–π —Å–ø–∏—Å–æ–∫ –∂–∏–≤–æ—Ç–Ω—ã—Ö")

# ======================== –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞ ========================

async def main():
    dp.include_router(router)
    await dp.start_polling(bot)

if __name__ == "__main__":
    asyncio.run(main())