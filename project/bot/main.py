import sqlite3
import asyncio
import logging
import re
import json
import random
from aiogram import Bot, Dispatcher, Router
from aiogram.filters import CommandStart, Command
from aiogram.types import Message, InlineKeyboardButton, InlineKeyboardMarkup, CallbackQuery
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import State, StatesGroup
from aiogram.fsm.storage.memory import MemoryStorage
from apscheduler.schedulers.asyncio import AsyncIOScheduler
from apscheduler.triggers.cron import CronTrigger
from datetime import datetime
from dotenv import load_dotenv
import os

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    level=logging.INFO,
    format='%(asctime)s - %(levelname)s - %(message)s',
    handlers=[
        logging.StreamHandler(),
        logging.FileHandler('bot.log', encoding='utf-8')
    ]
)

# –ó–∞–≥—Ä—É–∑–∫–∞ —Ç–æ–∫–µ–Ω–∞ –∏–∑ .env
load_dotenv()
TOKEN = os.getenv("TOKEN")
if TOKEN is None:
    raise ValueError("–ü–µ—Ä–µ–º–µ–Ω–Ω–∞—è –æ–∫—Ä—É–∂–µ–Ω–∏—è TOKEN –Ω–µ –Ω–∞–π–¥–µ–Ω–∞! –ü—Ä–æ–≤–µ—Ä—å—Ç–µ —Ñ–∞–π–ª .env.")

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–æ—Ç–∞ –∏ –¥–∏—Å–ø–µ—Ç—á–µ—Ä–∞
bot = Bot(token=TOKEN)
dp = Dispatcher(storage=MemoryStorage())
router = Router()

# –ü—É—Ç—å –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
DB_PATH = os.path.join(os.path.dirname(__file__), 'pets.db')

# –ì–ª–æ–±–∞–ª—å–Ω—ã–π –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫
scheduler = AsyncIOScheduler()


# –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
def get_db_connection():
    return sqlite3.connect(DB_PATH)


# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
def init_db():
    try:
        conn = get_db_connection()
        c = conn.cursor()
        c.execute("SELECT name FROM sqlite_master WHERE type='table' AND name='channels'")
        if not c.fetchone():
            c.execute("""
                CREATE TABLE channels (
                    chat_id INTEGER PRIMARY KEY,
                    filters TEXT,
                    schedule TEXT,
                    is_active INTEGER DEFAULT 1
                )
            """)
            logging.info("–¢–∞–±–ª–∏—Ü–∞ channels —Å–æ–∑–¥–∞–Ω–∞")
        conn.commit()
        conn.close()
    except sqlite3.Error as e:
        logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö: {e}")


# –ö–ª–∞—Å—Å—ã –¥–ª—è FSM
class FilterStates(StatesGroup):
    waiting_min_age = State()
    waiting_max_age = State()
    waiting_sex = State()
    waiting_name = State()
    waiting_channel_id = State()
    waiting_schedule = State()
    waiting_channel_filters = State()


# –ù–æ—Ä–º–∞–ª–∏–∑–∞—Ü–∏—è –≤–æ–∑—Ä–∞—Å—Ç–∞
def normalize_age(age_str):
    """–ò–∑–≤–ª–µ—á—å —á–∏—Å–ª–æ–≤–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ –≤–æ–∑—Ä–∞—Å—Ç–∞ –∏–∑ —Å—Ç—Ä–æ–∫–∏"""
    if not age_str or age_str.lower() in ["–Ω–µ —É–∫–∞–∑–∞–Ω", "", "unknown"]:
        logging.debug(f"–í–æ–∑—Ä–∞—Å—Ç –Ω–µ —É–∫–∞–∑–∞–Ω: {age_str}")
        return None
    match = re.search(r'\d+', age_str)
    if match:
        age = int(match.group())
        logging.debug(f"–ù–æ—Ä–º–∞–ª–∏–∑–æ–≤–∞–Ω–Ω—ã–π –≤–æ–∑—Ä–∞—Å—Ç: {age_str} ‚Üí {age}")
        return age
    logging.debug(f"–ù–µ —É–¥–∞–ª–æ—Å—å –Ω–æ—Ä–º–∞–ª–∏–∑–æ–≤–∞—Ç—å –≤–æ–∑—Ä–∞—Å—Ç: {age_str}")
    return None


# –ù–æ—Ä–º–∞–ª–∏–∑–∞—Ü–∏—è –ø–æ–ª–∞
def normalize_sex(sex_str):
    """–ü—Ä–∏–≤–µ—Å—Ç–∏ –∑–Ω–∞—á–µ–Ω–∏–µ –ø–æ–ª–∞ –∫ '–ú—É–∂—Å–∫–æ–π' –∏–ª–∏ '–ñ–µ–Ω—Å–∫–∏–π'"""
    if not sex_str or sex_str.lower() in ["–Ω–µ —É–∫–∞–∑–∞–Ω", "", "unknown"]:
        logging.debug(f"–ü–æ–ª –Ω–µ —É–∫–∞–∑–∞–Ω: {sex_str}")
        return None
    sex_str = sex_str.lower()
    male_keywords = ["–º—É–∂—Å–∫–æ–π", "—Å–∞–º–µ—Ü", "male", "boy", "–º", "‚ôÇ"]
    female_keywords = ["–∂–µ–Ω—Å–∫–∏–π", "—Å–∞–º–∫–∞", "female", "girl", "–∂", "‚ôÄ"]
    if any(keyword in sex_str for keyword in male_keywords):
        logging.debug(f"–ù–æ—Ä–º–∞–ª–∏–∑–æ–≤–∞–Ω–Ω—ã–π –ø–æ–ª: {sex_str} ‚Üí –ú—É–∂—Å–∫–æ–π")
        return "–ú—É–∂—Å–∫–æ–π"
    if any(keyword in sex_str for keyword in female_keywords):
        logging.debug(f"–ù–æ—Ä–º–∞–ª–∏–∑–æ–≤–∞–Ω–Ω—ã–π –ø–æ–ª: {sex_str} ‚Üí –ñ–µ–Ω—Å–∫–∏–π")
        return "–ñ–µ–Ω—Å–∫–∏–π"
    logging.debug(f"–ù–µ —É–¥–∞–ª–æ—Å—å –Ω–æ—Ä–º–∞–ª–∏–∑–æ–≤–∞—Ç—å –ø–æ–ª: {sex_str}")
    return None


def parse_schedule(schedule_str: str) -> str:
    """–ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä–æ–≤–∞—Ç—å —á–µ–ª–æ–≤–µ–∫–æ-—á–∏—Ç–∞–µ–º—É—é —Å—Ç—Ä–æ–∫—É —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è –≤ cron-–≤—ã—Ä–∞–∂–µ–Ω–∏–µ"""
    schedule_str = schedule_str.lower().strip()
    logging.debug(f"–û–±—Ä–∞–±–æ—Ç–∫–∞ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è: {schedule_str}")

    # –°–ª–æ–≤–∞—Ä—å –¥–ª—è –¥–Ω–µ–π –Ω–µ–¥–µ–ª–∏ —Å —Ä–∞—Å—à–∏—Ä–µ–Ω–Ω—ã–º –Ω–∞–±–æ—Ä–æ–º —Ñ–æ—Ä–º, –ø–∞–¥–µ–∂–µ–π –∏ —Å–æ–∫—Ä–∞—â–µ–Ω–∏–π
    days = {
        # –ü–æ–Ω–µ–¥–µ–ª—å–Ω–∏–∫
        "–ø–æ–Ω–µ–¥–µ–ª—å–Ω–∏–∫": "mon", "–ø–æ–Ω–µ–¥–µ–ª—å–Ω–∏–∫–∞": "mon", "–ø–æ–Ω–µ–¥–µ–ª—å–Ω–∏–∫–∞–º": "mon", "–ø–æ–Ω–µ–¥–µ–ª—å–Ω–∏–∫–∞—Ö": "mon",
        "–ø–æ–Ω": "mon", "–ø–Ω–¥": "mon", "–ø–æ–Ω–µ–¥": "mon", "–ø–æ–Ω–µ–¥–µ–ª—å–Ω": "mon",
        # –í—Ç–æ—Ä–Ω–∏–∫
        "–≤—Ç–æ—Ä–Ω–∏–∫": "tue", "–≤—Ç–æ—Ä–Ω–∏–∫–∞": "tue", "–≤—Ç–æ—Ä–Ω–∏–∫–∞–º": "tue", "–≤—Ç–æ—Ä–Ω–∏–∫–∞—Ö": "tue",
        "–≤—Ç": "tue", "–≤—Ç—Ä": "tue", "–≤—Ç–æ—Ä–Ω": "tue",
        # –°—Ä–µ–¥–∞
        "—Å—Ä–µ–¥–∞": "wed", "—Å—Ä–µ–¥—É": "wed", "—Å—Ä–µ–¥–∞–º": "wed", "—Å—Ä–µ–¥–∞—Ö": "wed",
        "—Å—Ä": "wed", "—Å—Ä–¥": "wed", "—Å—Ä–µ–¥": "wed",
        # –ß–µ—Ç–≤–µ—Ä–≥
        "—á–µ—Ç–≤–µ—Ä–≥": "thu", "—á–µ—Ç–≤–µ—Ä–≥–∞": "thu", "—á–µ—Ç–≤–µ—Ä–≥–∞–º": "thu", "—á–µ—Ç–≤–µ—Ä–≥–∞—Ö": "thu",
        "—á—Ç": "thu", "—á—Ç–≤": "thu", "—á–µ—Ç–≤": "thu", "—á–µ—Ç–≤–µ—Ä": "thu",
        # –ü—è—Ç–Ω–∏—Ü–∞
        "–ø—è—Ç–Ω–∏—Ü–∞": "fri", "–ø—è—Ç–Ω–∏—Ü—É": "fri", "–ø—è—Ç–Ω–∏—Ü–∞–º": "fri", "–ø—è—Ç–Ω–∏—Ü–∞—Ö": "fri",
        "–ø—Ç": "fri", "–ø—Ç–Ω": "fri", "–ø—è—Ç–Ω": "fri",
        # –°—É–±–±–æ—Ç–∞
        "—Å—É–±–±–æ—Ç–∞": "sat", "—Å—É–±–±–æ—Ç—É": "sat", "—Å—É–±–±–æ—Ç–∞–º": "sat", "—Å—É–±–±–æ—Ç–∞—Ö": "sat",
        "—Å–±": "sat", "—Å—É–±": "sat", "—Å—É–±–±": "sat",
        # –í–æ—Å–∫—Ä–µ—Å–µ–Ω—å–µ
        "–≤–æ—Å–∫—Ä–µ—Å–µ–Ω—å–µ": "sun", "–≤–æ—Å–∫—Ä–µ—Å–µ–Ω—å—è": "sun", "–≤–æ—Å–∫—Ä–µ—Å–µ–Ω—å—è–º": "sun", "–≤–æ—Å–∫—Ä–µ—Å–µ–Ω—å—è—Ö": "sun",
        "–≤—Å": "sun", "–≤—Å–∫": "sun", "–≤–æ—Å–∫—Ä": "sun"
    }

    # –°–∏–Ω–æ–Ω–∏–º—ã –¥–ª—è –µ–∂–µ–¥–Ω–µ–≤–Ω—ã—Ö —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–π
    daily_keywords = [
        "–µ–∂–µ–¥–Ω–µ–≤–Ω–æ", "–∫–∞–∂–¥—ã–π –¥–µ–Ω—å", "–µ–∂–µ–¥–Ω", "–∫–∞–∂–¥–æ–¥–Ω–µ–≤–Ω–æ", "–≤—Å–µ –¥–Ω–∏", "–∫–∞–∂–¥–æ–µ —É—Ç—Ä–æ",
        "–≤—Å–µ–≥–¥–∞", "–ø–æ—Å—Ç–æ—è–Ω–Ω–æ", "–∫–∞–∂–¥—ã–π –¥–µ–Ω", "–µ–∂–µ–¥–Ω–µ–≤–Ω", "–∫–∞–∂–¥–æ–¥–Ω"
    ]

    # –ü—Ä–µ–¥–ª–æ–≥–∏ –∏ –º–æ–¥–∏—Ñ–∏–∫–∞—Ç–æ—Ä—ã
    prefixes = ["–∫–∞–∂–¥—ã–π", "–∫–∞–∂–¥–∞—è", "–ø–æ", "–≤", "–≤–æ", "–Ω–∞"]

    try:
        # –ò–∑–≤–ª–µ–∫–∞–µ–º –≤—Ä–µ–º—è —Å –ø–æ–º–æ—â—å—é —Ä–µ–≥—É–ª—è—Ä–Ω–æ–≥–æ –≤—ã—Ä–∞–∂–µ–Ω–∏—è
        time_match = re.search(r'(\d{1,2}[:.]\d{2})', schedule_str)
        if not time_match:
            raise ValueError("–ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏ –≤—Ä–µ–º—è –≤ —Ñ–æ—Ä–º–∞—Ç–µ HH:MM –∏–ª–∏ HH.MM")

        time_str = time_match.group(1).replace(".", ":")  # –ù–æ—Ä–º–∞–ª–∏–∑—É–µ–º —Ä–∞–∑–¥–µ–ª–∏—Ç–µ–ª—å
        dt = datetime.strptime(time_str, "%H:%M")

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —á–∞—Å—ã –∏ –º–∏–Ω—É—Ç—ã –≤ –¥–æ–ø—É—Å—Ç–∏–º–æ–º –¥–∏–∞–ø–∞–∑–æ–Ω–µ
        if dt.hour > 23 or dt.minute > 59:
            raise ValueError("–ß–∞—Å—ã –¥–æ–ª–∂–Ω—ã –±—ã—Ç—å –æ—Ç 00 –¥–æ 23, –º–∏–Ω—É—Ç—ã –æ—Ç 00 –¥–æ 59")

        # –£–¥–∞–ª—è–µ–º –≤—Ä–µ–º—è –∏–∑ —Å—Ç—Ä–æ–∫–∏ –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞ –¥–Ω—è
        day_str = re.sub(r'\d{1,2}[:.]\d{2}', '', schedule_str).strip()

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ –µ–∂–µ–¥–Ω–µ–≤–Ω—ã–º
        if any(keyword in day_str for keyword in daily_keywords):
            return f"{dt.minute} {dt.hour} * * *"

        # –£–¥–∞–ª—è–µ–º –ø—Ä–µ–¥–ª–æ–≥–∏ –∏ –º–æ–¥–∏—Ñ–∏–∫–∞—Ç–æ—Ä—ã
        for prefix in prefixes:
            day_str = day_str.replace(prefix, "").strip()

        # –ò—â–µ–º –¥–µ–Ω—å –Ω–µ–¥–µ–ª–∏
        day = next((v for k, v in days.items() if k in day_str), None)
        if not day:
            raise ValueError("–ù–µ–≤–µ—Ä–Ω—ã–π –¥–µ–Ω—å –Ω–µ–¥–µ–ª–∏")

        return f"{dt.minute} {dt.hour} * * {day}"

    except ValueError as e:
        logging.error(f"–û—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è: {schedule_str}, {e}")
        error_context = (
            "–Ω–µ–≤–µ—Ä–Ω–æ–µ –≤—Ä–µ–º—è" if "strptime" in str(e).lower() or "–ß–∞—Å—ã" in str(e)
            else "–Ω–µ–≤–µ—Ä–Ω—ã–π –¥–µ–Ω—å –Ω–µ–¥–µ–ª–∏"
        )
        logging.debug(f"–ö–æ–Ω—Ç–µ–∫—Å—Ç –æ—à–∏–±–∫–∏: {error_context}")
        error_message = (
            "‚ö†Ô∏è –ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è!\n\n"
            "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –æ–¥–∏–Ω –∏–∑ —Å–ª–µ–¥—É—é—â–∏—Ö —Ñ–æ—Ä–º–∞—Ç–æ–≤:\n"
            "üìÖ –ï–∂–µ–¥–Ω–µ–≤–Ω–æ: '–µ–∂–µ–¥–Ω–µ–≤–Ω–æ –≤ HH:MM', '–∫–∞–∂–¥—ã–π –¥–µ–Ω—å –≤ HH:MM', '–≤—Å–µ –¥–Ω–∏ –≤ HH:MM'\n"
            "üìÜ –ü–æ –¥–Ω—è–º –Ω–µ–¥–µ–ª–∏: '–∫–∞–∂–¥—ã–π <–¥–µ–Ω—å> –≤ HH:MM', '–ø–æ <–¥–µ–Ω—å> –≤ HH:MM', '–≤–æ <–¥–µ–Ω—å> –≤ HH:MM'\n\n"
            "–ü—Ä–∏–º–µ—Ä—ã:\n"
            "- –µ–∂–µ–¥–Ω–µ–≤–Ω–æ –≤ 10:00\n"
            "- –∫–∞–∂–¥—ã–π –¥–µ–Ω—å –≤ 15:00\n"
            "- –ø–æ –ø–æ–Ω–µ–¥–µ–ª—å–Ω–∏–∫–∞–º –≤ 12:00\n"
            "- –≤–æ –≤—Ç–æ—Ä–Ω–∏–∫ –≤ 14:30\n"
            "- –≤ —Å—É–±–±–æ—Ç—É –≤ 09:00\n"
            "- –Ω–∞ –ø—è—Ç–Ω–∏—Ü—É –≤ 17:00\n\n"
            "–ü–æ–¥—Å–∫–∞–∑–∫–∏:\n"
            f"- {'–í—Ä–µ–º—è –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å –≤ —Ñ–æ—Ä–º–∞—Ç–µ HH:MM (–Ω–∞–ø—Ä–∏–º–µ—Ä, 09:00, 14:30).' if error_context == '–Ω–µ–≤–µ—Ä–Ω–æ–µ –≤—Ä–µ–º—è' else '–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–µ –¥–Ω–∏ –Ω–µ–¥–µ–ª–∏ (–ø–æ–Ω–µ–¥–µ–ª—å–Ω–∏–∫, –≤—Ç–æ—Ä–Ω–∏–∫, —Å—Ä–µ–¥–∞ –∏ —Ç.–¥.) –∏–ª–∏ —Å–æ–∫—Ä–∞—â–µ–Ω–∏—è (–ø–Ω, –≤—Ç, —Å—Ä).'}\n"
            "- –ü—Ä–æ–≤–µ—Ä—å—Ç–µ, –Ω–µ—Ç –ª–∏ –ª–∏—à–Ω–∏—Ö –ø—Ä–æ–±–µ–ª–æ–≤ –∏–ª–∏ –æ–ø–µ—á–∞—Ç–æ–∫.\n\n"
            "–ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞!"
        )
        raise ValueError(error_message)


def cron_to_human_readable(cron: str) -> str:
    """–ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä–æ–≤–∞—Ç—å cron-–≤—ã—Ä–∞–∂–µ–Ω–∏–µ –≤ —á–µ–ª–æ–≤–µ–∫–æ-—á–∏—Ç–∞–µ–º—ã–π —Ñ–æ—Ä–º–∞—Ç"""
    try:
        parts = cron.split()
        if len(parts) != 5:
            return "–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ"

        minute, hour, day, month, day_of_week = parts

        # –§–æ—Ä–º–∏—Ä—É–µ–º –≤—Ä–µ–º—è
        time_str = f"{hour.zfill(2)}:{minute.zfill(2)}"

        # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –¥–µ–Ω—å –Ω–µ–¥–µ–ª–∏
        days = {
            "*": "–µ–∂–µ–¥–Ω–µ–≤–Ω–æ",
            "mon": "–ø–æ–Ω–µ–¥–µ–ª—å–Ω–∏–∫",
            "tue": "–≤—Ç–æ—Ä–Ω–∏–∫",
            "wed": "—Å—Ä–µ–¥–∞",
            "thu": "—á–µ—Ç–≤–µ—Ä–≥",
            "fri": "–ø—è—Ç–Ω–∏—Ü–∞",
            "sat": "—Å—É–±–±–æ—Ç–∞",
            "sun": "–≤–æ—Å–∫—Ä–µ—Å–µ–Ω—å–µ"
        }

        day_str = days.get(day_of_week.lower(), None)
        if not day_str:
            return "–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –¥–µ–Ω—å –Ω–µ–¥–µ–ª–∏"

        # –§–æ—Ä–º–∏—Ä—É–µ–º —Å—Ç—Ä–æ–∫—É
        if day_str == "–µ–∂–µ–¥–Ω–µ–≤–Ω–æ":
            return f"–µ–∂–µ–¥–Ω–µ–≤–Ω–æ –≤ {time_str}"
        return f"–∫–∞–∂–¥—ã–π {day_str} –≤ {time_str}"

    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∫–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏–∏ cron: {cron}, {e}")
        return "–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ"

# ======================== –ö–ª–∞–≤–∏–∞—Ç—É—Ä—ã ========================

def main_keyboard():
    """–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é"""
    return InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="üìã –í—Å–µ –∂–∏–≤–æ—Ç–Ω—ã–µ", callback_data="view_all")],
        [InlineKeyboardButton(text="üîç –§–∏–ª—å—Ç—Ä—ã", callback_data="view_filtered")],
        [InlineKeyboardButton(text="üì¨ –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Ä–∞—Å—Å—ã–ª–∫–æ–π", callback_data="manage_broadcast")]
    ])


def filters_keyboard(selected_filters: dict) -> InlineKeyboardMarkup:
    """–ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –≤—ã–±–æ—Ä–∞ —Ñ–∏–ª—å—Ç—Ä–æ–≤ –¥–ª—è –∏–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω–æ–≥–æ —Ä–µ–∂–∏–º–∞"""

    def mark_selected(text, key):
        if key == "age":
            age_selected = "age_min" in selected_filters and "age_max" in selected_filters
            return f"‚úî {text}" if age_selected else text
        return f"‚úî {text}" if key in selected_filters else text

    return InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text=mark_selected("üìÖ –í–æ–∑—Ä–∞—Å—Ç", "age"), callback_data="filter_age")],
        [InlineKeyboardButton(text=mark_selected("‚ö§ –ü–æ–ª", "sex"), callback_data="filter_sex")],
        [InlineKeyboardButton(text=mark_selected("üîé –ò–º—è", "name"), callback_data="filter_name")],
        [InlineKeyboardButton(text="‚úÖ –ü–æ–∫–∞–∑–∞—Ç—å", callback_data="show_filtered")],
        [InlineKeyboardButton(text="üîô –ù–∞–∑–∞–¥", callback_data="back_to_main")]
    ])


def broadcast_filters_keyboard(selected_filters: dict) -> InlineKeyboardMarkup:
    """–ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –≤—ã–±–æ—Ä–∞ —Ñ–∏–ª—å—Ç—Ä–æ–≤ –¥–ª—è —Ä–∞—Å—Å—ã–ª–∫–∏"""

    def mark_selected(text, key):
        if key == "age":
            age_selected = "age_min" in selected_filters and "age_max" in selected_filters
            return f"‚úî {text}" if age_selected else text
        return f"‚úî {text}" if key in selected_filters else text

    return InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text=mark_selected("üìÖ –í–æ–∑—Ä–∞—Å—Ç", "age"), callback_data="broadcast_filter_age")],
        [InlineKeyboardButton(text=mark_selected("‚ö§ –ü–æ–ª", "sex"), callback_data="broadcast_filter_sex")],
        [InlineKeyboardButton(text=mark_selected("üîé –ò–º—è", "name"), callback_data="broadcast_filter_name")],
        [InlineKeyboardButton(text="‚úÖ –°–æ—Ö—Ä–∞–Ω–∏—Ç—å", callback_data="save_broadcast_filters")],
        [InlineKeyboardButton(text="üîô –ù–∞–∑–∞–¥", callback_data="back_to_broadcast_filters")]
    ])


def sex_keyboard(prefix: str = "") -> InlineKeyboardMarkup:
    """–ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –≤—ã–±–æ—Ä–∞ –ø–æ–ª–∞ —Å –ø–æ–¥–¥–µ—Ä–∂–∫–æ–π –ø—Ä–µ—Ñ–∏–∫—Å–∞"""
    return InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="–ú—É–∂—Å–∫–æ–π", callback_data=f"{prefix}sex_–ú—É–∂—Å–∫–æ–π")],
        [InlineKeyboardButton(text="–ñ–µ–Ω—Å–∫–∏–π", callback_data=f"{prefix}sex_–ñ–µ–Ω—Å–∫–∏–π")],
        [InlineKeyboardButton(text="üîô –ù–∞–∑–∞–¥", callback_data=f"back_to_{prefix}filters")]
    ])


def age_keyboard(start_age: int, end_age: int, mode: str, prefix: str = "") -> InlineKeyboardMarkup:
    """–ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –¥–ª—è –≤—ã–±–æ—Ä–∞ –≤–æ–∑—Ä–∞—Å—Ç–∞ —Å –ø–æ–¥–¥–µ—Ä–∂–∫–æ–π –ø—Ä–µ—Ñ–∏–∫—Å–∞"""
    buttons = [[]]
    if end_age < start_age:
        logging.warning(f"–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –¥–∏–∞–ø–∞–∑–æ–Ω –≤–æ–∑—Ä–∞—Å—Ç–∞: start={start_age}, end={end_age}")
        end_age = start_age
    for age in range(start_age, end_age + 1):
        if len(buttons[-1]) >= 3:
            buttons.append([])
        callback_data = f"{prefix}age_{mode}_{age}"
        buttons[-1].append(InlineKeyboardButton(text=str(age), callback_data=callback_data))
    buttons.append([InlineKeyboardButton(text="üîô –ù–∞–∑–∞–¥", callback_data=f"back_to_{prefix}filters")])
    return InlineKeyboardMarkup(inline_keyboard=buttons)


def broadcast_management_keyboard() -> InlineKeyboardMarkup:
    """–ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è —Ä–∞—Å—Å—ã–ª–∫–æ–π"""
    return InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="‚ûï –î–æ–±–∞–≤–∏—Ç—å –∫–∞–Ω–∞–ª", callback_data="add_channel")],
        [InlineKeyboardButton(text="üìã –°–ø–∏—Å–æ–∫ –∫–∞–Ω–∞–ª–æ–≤", callback_data="list_channels")],
        [InlineKeyboardButton(text="üóë –£–¥–∞–ª–∏—Ç—å –∫–∞–Ω–∞–ª", callback_data="start_remove_channel")],
        [InlineKeyboardButton(text="üîô –ù–∞–∑–∞–¥", callback_data="back_to_main")]
    ])


# ======================== –§—É–Ω–∫—Ü–∏–∏ —Ä–∞–±–æ—Ç—ã —Å –±–∞–∑–æ–π –¥–∞–Ω–Ω—ã—Ö ========================

def get_all_animals():
    """–ü–æ–ª—É—á–∏—Ç—å –≤—Å–µ—Ö –∂–∏–≤–æ—Ç–Ω—ã—Ö –∏–∑ –±–∞–∑—ã"""
    try:
        conn = get_db_connection()
        c = conn.cursor()
        c.execute("SELECT id, name, age, sex, photo_url, description FROM animals")
        animals = [{"id": row[0], "name": row[1], "age": row[2], "sex": row[3],
                    "photo_url": row[4], "description": row[5]} for row in c.fetchall()]
        conn.close()
        logging.info(f"–ü–æ–ª—É—á–µ–Ω–æ {len(animals)} –∂–∏–≤–æ—Ç–Ω—ã—Ö –∏–∑ –±–∞–∑—ã")
        return animals
    except sqlite3.Error as e:
        logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –≤—Å–µ—Ö –∂–∏–≤–æ—Ç–Ω—ã—Ö: {e}")
        return []


def get_animals_by_filters(filters: dict):
    """–ü–æ–ª—É—á–∏—Ç—å –∂–∏–≤–æ—Ç–Ω—ã—Ö –ø–æ —Ñ–∏–ª—å—Ç—Ä–∞–º"""
    try:
        conn = get_db_connection()
        c = conn.cursor()
        query = "SELECT id, name, age, sex, photo_url, description FROM animals WHERE 1=1"
        params = []

        if "name" in filters:
            query += " AND name LIKE ?"
            params.append(f"%{filters['name']}%")
            logging.info(f"–ü—Ä–∏–º–µ–Ω—ë–Ω —Ñ–∏–ª—å—Ç—Ä –ø–æ –∏–º–µ–Ω–∏: {filters['name']}")

        if "sex" in filters:
            query += " AND sex = ?"
            params.append(filters["sex"])
            logging.info(f"–ü—Ä–∏–º–µ–Ω—ë–Ω —Ñ–∏–ª—å—Ç—Ä –ø–æ –ø–æ–ª—É: {filters['sex']}")

        c.execute(query, params)
        animals = [{"id": row[0], "name": row[1], "age": row[2], "sex": row[3],
                    "photo_url": row[4], "description": row[5]} for row in c.fetchall()]
        logging.info(f"–ù–∞–π–¥–µ–Ω–æ {len(animals)} –∂–∏–≤–æ—Ç–Ω—ã—Ö –ø–æ—Å–ª–µ SQL-—Ñ–∏–ª—å—Ç—Ä–æ–≤")

        if "age_min" in filters and "age_max" in filters:
            age_min = filters["age_min"]
            age_max = filters["age_max"]
            filtered_animals = []
            for animal in animals:
                age = normalize_age(animal["age"])
                if age is not None and age_min <= age <= age_max:
                    filtered_animals.append(animal)
            animals = filtered_animals
            logging.info(f"–ü–æ—Å–ª–µ —Ñ–∏–ª—å—Ç—Ä–∞ –ø–æ –≤–æ–∑—Ä–∞—Å—Ç—É ({age_min}-{age_max}): {len(animals)} –∂–∏–≤–æ—Ç–Ω—ã—Ö")

        for animal in animals:
            animal["sex"] = normalize_sex(animal["sex"]) or "–ù–µ —É–∫–∞–∑–∞–Ω"

        conn.close()
        return animals
    except sqlite3.Error as e:
        logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–∏ –∂–∏–≤–æ—Ç–Ω—ã—Ö: {e}")
        return []


def get_max_age():
    """–ü–æ–ª—É—á–∏—Ç—å –º–∞–∫—Å–∏–º–∞–ª—å–Ω—ã–π –≤–æ–∑—Ä–∞—Å—Ç –∏–∑ –±–∞–∑—ã"""
    try:
        conn = get_db_connection()
        c = conn.cursor()
        c.execute("SELECT age FROM animals")
        ages = [normalize_age(row[0]) for row in c.fetchall() if normalize_age(row[0]) is not None]
        conn.close()
        max_age = max(ages) if ages else 10
        logging.info(f"–ú–∞–∫—Å–∏–º–∞–ª—å–Ω—ã–π –≤–æ–∑—Ä–∞—Å—Ç: {max_age}")
        return max_age
    except sqlite3.Error as e:
        logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–≥–æ –≤–æ–∑—Ä–∞—Å—Ç–∞: {e}")
        return 10


def add_channel(chat_id: int, filters: dict = None, schedule: str = "0 10 * * *"):
    """–î–æ–±–∞–≤–∏—Ç—å –∫–∞–Ω–∞–ª –≤ –±–∞–∑—É –¥–ª—è —Ä–∞—Å—Å—ã–ª–∫–∏"""
    try:
        conn = get_db_connection()
        c = conn.cursor()
        filters_json = json.dumps(filters) if filters else "{}"
        logging.info(f"–°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –∫–∞–Ω–∞–ª–∞ {chat_id} —Å —Ñ–∏–ª—å—Ç—Ä–∞–º–∏ {filters_json} –∏ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ–º {schedule}")
        c.execute("INSERT OR REPLACE INTO channels (chat_id, filters, schedule, is_active) VALUES (?, ?, ?, 1)",
                  (chat_id, filters_json, schedule))
        conn.commit()
        conn.close()
        logging.info(f"–ö–∞–Ω–∞–ª {chat_id} —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω –≤ –±–∞–∑—É")

        # –î–∏–Ω–∞–º–∏—á–µ—Å–∫–∏ –¥–æ–±–∞–≤–ª—è–µ–º –∑–∞–¥–∞—á—É –≤ –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫
        schedule_broadcast(chat_id, schedule)
    except sqlite3.Error as e:
        logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ –∫–∞–Ω–∞–ª–∞: {e}")


def get_channels():
    """–ü–æ–ª—É—á–∏—Ç—å –≤—Å–µ –∫–∞–Ω–∞–ª—ã –∏–∑ –±–∞–∑—ã"""
    try:
        conn = get_db_connection()
        c = conn.cursor()
        c.execute("SELECT chat_id, filters, schedule, is_active FROM channels")
        channels = [{"chat_id": row[0], "filters": json.loads(row[1]) if row[1] else {},
                     "schedule": row[2], "is_active": row[3]} for row in c.fetchall()]
        conn.close()
        logging.info(f"–ü–æ–ª—É—á–µ–Ω–æ {len(channels)} –∫–∞–Ω–∞–ª–æ–≤: {channels}")
        return channels
    except sqlite3.Error as e:
        logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –∫–∞–Ω–∞–ª–æ–≤: {e}")
        return []


def remove_channel(chat_id: int):
    """–£–¥–∞–ª–∏—Ç—å –∫–∞–Ω–∞–ª –∏–∑ –±–∞–∑—ã –∏ –∑–∞–¥–∞—á—É –∏–∑ –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫–∞"""
    try:
        # –£–¥–∞–ª–µ–Ω–∏–µ –∫–∞–Ω–∞–ª–∞ –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
        conn = get_db_connection()
        c = conn.cursor()
        c.execute("DELETE FROM channels WHERE chat_id = ?", (chat_id,))
        affected_rows = c.rowcount
        conn.commit()
        conn.close()
        logging.info(f"–ö–∞–Ω–∞–ª {chat_id} —É–¥–∞–ª—ë–Ω –∏–∑ –±–∞–∑—ã, –∑–∞—Ç—Ä–æ–Ω—É—Ç–æ —Å—Ç—Ä–æ–∫: {affected_rows}")

        # –£–¥–∞–ª–µ–Ω–∏–µ –∑–∞–¥–∞—á–∏ –∏–∑ –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫–∞
        job_id = str(chat_id)  # –ü—Ä–∏–≤–æ–¥–∏–º chat_id –∫ —Å—Ç—Ä–æ–∫–µ, —Ç–∞–∫ –∫–∞–∫ apscheduler –∏—Å–ø–æ–ª—å–∑—É–µ—Ç —Å—Ç—Ä–æ–∫–æ–≤—ã–µ –∏–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä—ã
        if scheduler.get_job(job_id):
            scheduler.remove_job(job_id)
            logging.info(f"–ó–∞–¥–∞—á–∞ —Ä–∞—Å—Å—ã–ª–∫–∏ –¥–ª—è –∫–∞–Ω–∞–ª–∞ {chat_id} —É–¥–∞–ª–µ–Ω–∞ –∏–∑ –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫–∞")
        else:
            logging.info(f"–ó–∞–¥–∞—á–∞ –¥–ª—è –∫–∞–Ω–∞–ª–∞ {chat_id} –Ω–µ –Ω–∞–π–¥–µ–Ω–∞ –≤ –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫–µ")

        return affected_rows > 0  # –í–æ–∑–≤—Ä–∞—â–∞–µ–º True, –µ—Å–ª–∏ –∫–∞–Ω–∞–ª –±—ã–ª —É–¥–∞–ª—ë–Ω

    except sqlite3.Error as e:
        logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ –∫–∞–Ω–∞–ª–∞ –∏–∑ –±–∞–∑—ã: {e}")
        return False
    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ –∑–∞–¥–∞—á–∏ –∏–∑ –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫–∞: {e}")
        return False


def schedule_broadcast(chat_id: int, schedule: str):
    """–î–æ–±–∞–≤–∏—Ç—å –∏–ª–∏ –æ–±–Ω–æ–≤–∏—Ç—å –∑–∞–¥–∞—á—É —Ä–∞—Å—Å—ã–ª–∫–∏ –¥–ª—è –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ –∫–∞–Ω–∞–ª–∞"""
    try:
        if not schedule.strip():
            logging.error(f"–ü—É—Å—Ç–æ–µ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ –¥–ª—è –∫–∞–Ω–∞–ª–∞ {chat_id}")
            return
        # –£–¥–∞–ª—è–µ–º —Å—Ç–∞—Ä—É—é –∑–∞–¥–∞—á—É, –µ—Å–ª–∏ –æ–Ω–∞ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç
        if scheduler.get_job(str(chat_id)):
            scheduler.remove_job(str(chat_id))
            logging.info(f"–°—Ç–∞—Ä–∞—è –∑–∞–¥–∞—á–∞ –¥–ª—è –∫–∞–Ω–∞–ª–∞ {chat_id} —É–¥–∞–ª–µ–Ω–∞")

        # –î–æ–±–∞–≤–ª—è–µ–º –Ω–æ–≤—É—é –∑–∞–¥–∞—á—É, –ø–µ—Ä–µ–¥–∞–≤–∞—è chat_id
        scheduler.add_job(
            broadcast_animal_for_channel,
            trigger=CronTrigger.from_crontab(schedule),
            args=[chat_id],
            id=str(chat_id)
        )
        logging.info(f"–ó–∞–¥–∞—á–∞ —Ä–∞—Å—Å—ã–ª–∫–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∞ –¥–ª—è –∫–∞–Ω–∞–ª–∞ {chat_id} —Å —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ–º {schedule}")
    except ValueError as e:
        logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ –∑–∞–¥–∞—á–∏ –¥–ª—è –∫–∞–Ω–∞–ª–∞ {chat_id}: {e}")


async def broadcast_animal_for_channel(chat_id: int):
    """–û—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–ª—É—á–∞–π–Ω–æ–≥–æ –ø–∏—Ç–æ–º—Ü–∞ –≤ —É–∫–∞–∑–∞–Ω–Ω—ã–π –∫–∞–Ω–∞–ª"""
    channels = get_channels()
    channel = next((c for c in channels if c["chat_id"] == chat_id), None)

    if not channel:
        logging.error(f"–ö–∞–Ω–∞–ª {chat_id} –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –±–∞–∑–µ")
        return

    if not channel["is_active"]:
        logging.info(f"–ö–∞–Ω–∞–ª {chat_id} –Ω–µ–∞–∫—Ç–∏–≤–µ–Ω, –ø—Ä–æ–ø—É—Å–∫")
        return

    filters = channel["filters"]
    logging.info(f"–ü—Ä–∏–º–µ–Ω–µ–Ω–∏–µ —Ñ–∏–ª—å—Ç—Ä–æ–≤ –¥–ª—è –∫–∞–Ω–∞–ª–∞ {chat_id}: {filters}")
    animals = get_animals_by_filters(filters)

    if not animals:
        logging.info(f"–î–ª—è –∫–∞–Ω–∞–ª–∞ {chat_id} –Ω–µ –Ω–∞–π–¥–µ–Ω–æ –∂–∏–≤–æ—Ç–Ω—ã—Ö –ø–æ —Ñ–∏–ª—å—Ç—Ä–∞–º {filters}")
        return

    animal = random.choice(animals)
    text = (
        f"üêæ <b>{animal['name']}</b>\n\n"
        f"üìÖ <b>–í–æ–∑—Ä–∞—Å—Ç:</b> {animal['age']}\n"
        f"‚ö§ <b>–ü–æ–ª:</b> {animal['sex']}"
    )
    keyboard = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="üåê –ü–µ—Ä–µ–π—Ç–∏ –Ω–∞ —Å–∞–π—Ç", url=animal['description'] if animal['description'].startswith(
            'http') else 'https://less-homeless.com')]
    ])

    try:
        await bot.send_photo(
            chat_id=chat_id,
            photo=animal['photo_url'],
            caption=text,
            parse_mode="HTML",
            reply_markup=keyboard
        )
        logging.info(f"–û—Ç–ø—Ä–∞–≤–ª–µ–Ω –ø–∏—Ç–æ–º–µ—Ü {animal['name']} –≤ –∫–∞–Ω–∞–ª {chat_id}")
    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Ñ–æ—Ç–æ –≤ –∫–∞–Ω–∞–ª {chat_id}: {e}")
        try:
            await bot.send_message(
                chat_id=chat_id,
                text=text,
                parse_mode="HTML",
                reply_markup=keyboard
            )
            logging.info(f"–û—Ç–ø—Ä–∞–≤–ª–µ–Ω —Ç–µ–∫—Å—Ç–æ–≤—ã–π –ø–∏—Ç–æ–º–µ—Ü {animal['name']} –≤ –∫–∞–Ω–∞–ª {chat_id}")
        except Exception as e:
            logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Ç–µ–∫—Å—Ç–∞ –≤ –∫–∞–Ω–∞–ª {chat_id}: {e}")


async def broadcast_animal():
    """–†—É—á–Ω–æ–π –∑–∞–ø—É—Å–∫ —Ä–∞—Å—Å—ã–ª–∫–∏ –≤–æ –≤—Å–µ –∞–∫—Ç–∏–≤–Ω—ã–µ –∫–∞–Ω–∞–ª—ã (–¥–ª—è –æ—Ç–ª–∞–¥–∫–∏)"""
    channels = get_channels()
    logging.info(f"–†—É—á–Ω–æ–π –∑–∞–ø—É—Å–∫ —Ä–∞—Å—Å—ã–ª–∫–∏ –¥–ª—è {len(channels)} –∫–∞–Ω–∞–ª–æ–≤")

    for channel in channels:
        if not channel["is_active"]:
            logging.info(f"–ö–∞–Ω–∞–ª {channel['chat_id']} –Ω–µ–∞–∫—Ç–∏–≤–µ–Ω, –ø—Ä–æ–ø—É—Å–∫")
            continue
        await broadcast_animal_for_channel(channel["chat_id"])


# ======================== –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ ========================

@router.message(CommandStart())
async def start(message: Message):
    """–°—Ç–∞—Ä—Ç–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ"""
    await message.answer("–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å! –≠—Ç–æ—Ç –±–æ—Ç –ø–æ–º–æ–≥–∞–µ—Ç –Ω–∞–π—Ç–∏ –ø–∏—Ç–æ–º—Ü–µ–≤ –∏–∑ –ø—Ä–∏—é—Ç–∞.",
                         reply_markup=main_keyboard())


@router.message(FilterStates.waiting_channel_id)
async def process_channel_id(message: Message, state: FSMContext):
    chat_id_str = message.text.strip()
    if not re.match(r'^-100\d+$', chat_id_str):
        await message.answer(
            "–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π ID –∫–∞–Ω–∞–ª–∞. ID –¥–æ–ª–∂–µ–Ω –Ω–∞—á–∏–Ω–∞—Ç—å—Å—è —Å '-100' –∏ —Å–æ–¥–µ—Ä–∂–∞—Ç—å —Ç–æ–ª—å–∫–æ —Ü–∏—Ñ—Ä—ã.\n"
            "–ü—Ä–∏–º–µ—Ä: -100123456789\n–ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞."
        )
        return
    try:
        chat_id = int(chat_id_str)
        await state.update_data(channel_id=chat_id, state="channel_filters")
        await message.answer(
            "–í–≤–µ–¥–∏—Ç–µ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ (–Ω–∞–ø—Ä–∏–º–µ—Ä, '–µ–∂–µ–¥–Ω–µ–≤–Ω–æ –≤ 10:00' –∏–ª–∏ '–∫–∞–∂–¥—ã–π –ø–æ–Ω–µ–¥–µ–ª—å–Ω–∏–∫ –≤ 15:00'):"
        )
        await state.set_state(FilterStates.waiting_schedule)
    except ValueError:
        await message.answer("–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π ID –∫–∞–Ω–∞–ª–∞. –í–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ, –Ω–∞–ø—Ä–∏–º–µ—Ä, -100123456789.")
        return

@router.message(FilterStates.waiting_schedule)
async def process_schedule(message: Message, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç–∞—Ç—å —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ"""
    schedule_str = message.text.strip()
    try:
        cron_schedule = parse_schedule(schedule_str)
        await state.update_data(schedule=cron_schedule)
        await message.answer(
            "–†–∞—Å–ø–∏—Å–∞–Ω–∏–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ. –¢–µ–ø–µ—Ä—å –≤—ã–±–µ—Ä–∏—Ç–µ —Ñ–∏–ª—å—Ç—Ä—ã –¥–ª—è —Ä–∞—Å—Å—ã–ª–∫–∏. –ú–æ–∂–Ω–æ –Ω–µ –≤—ã–±–∏—Ä–∞—Ç—å –∏ —Å—Ä–∞–∑—É –Ω–∞–∂–∞—Ç—å —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å:",
            reply_markup=broadcast_filters_keyboard({})
        )
        await state.set_state(FilterStates.waiting_channel_filters)
    except ValueError as e:
        await message.answer(
            f"–û—à–∏–±–∫–∞: {e}. –ü—Ä–∏–º–µ—Ä—ã: '–µ–∂–µ–¥–Ω–µ–≤–Ω–æ –≤ 10:00', '–∫–∞–∂–¥—ã–π –ø–æ–Ω–µ–¥–µ–ª—å–Ω–∏–∫ –≤ 15:00'."
        )
        return


@router.message(Command("list_channels"))
async def cmd_list_channels(message: Message):
    """–ü–æ–∫–∞–∑–∞—Ç—å —Å–ø–∏—Å–æ–∫ –∫–∞–Ω–∞–ª–æ–≤"""
    channels = get_channels()
    logging.info(f"–ó–∞–ø—Ä–æ—Å —Å–ø–∏—Å–∫–∞ –∫–∞–Ω–∞–ª–æ–≤, –ø–æ–ª—É—á–µ–Ω–æ: {channels}")
    if not channels:
        await message.answer("–ù–µ—Ç –ø—Ä–∏–≤—è–∑–∞–Ω–Ω—ã—Ö –∫–∞–Ω–∞–ª–æ–≤.")
        return
    text = "–ü—Ä–∏–≤—è–∑–∞–Ω–Ω—ã–µ –∫–∞–Ω–∞–ª—ã:\n"
    for channel in channels:
        status = "–∞–∫—Ç–∏–≤–µ–Ω" if channel["is_active"] else "–æ—Ç–∫–ª—é—á—ë–Ω"
        filters = channel["filters"] or "–±–µ–∑ —Ñ–∏–ª—å—Ç—Ä–æ–≤"
        text += f"ID: {channel['chat_id']}, –§–∏–ª—å—Ç—Ä—ã: {filters}, –†–∞—Å–ø–∏—Å–∞–Ω–∏–µ: {channel['schedule']}, –°—Ç–∞—Ç—É—Å: {status}\n"
    await message.answer(text)


@router.callback_query(lambda c: c.data == "manage_broadcast")
async def manage_broadcast(callback: CallbackQuery):
    """–û—Ç–∫—Ä—ã—Ç—å –º–µ–Ω—é —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è —Ä–∞—Å—Å—ã–ª–∫–æ–π"""
    await callback.message.edit_text("–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Ä–∞—Å—Å—ã–ª–∫–æ–π:", reply_markup=broadcast_management_keyboard())


@router.callback_query(lambda c: c.data == "add_channel")
async def start_add_channel(callback: CallbackQuery, state: FSMContext):
    """–ù–∞—á–∞—Ç—å –¥–æ–±–∞–≤–ª–µ–Ω–∏–µ –∫–∞–Ω–∞–ª–∞ —á–µ—Ä–µ–∑ callback"""
    await callback.message.edit_text(
        "üì¨ <b>–î–æ–±–∞–≤–ª–µ–Ω–∏–µ –∫–∞–Ω–∞–ª–∞ –∏–ª–∏ –≥—Ä—É–ø–ø—ã</b>\n\n"
        "–í–≤–µ–¥–∏—Ç–µ ID –∫–∞–Ω–∞–ª–∞ –∏–ª–∏ –≥—Ä—É–ø–ø—ã (–Ω–∞–ø—Ä–∏–º–µ—Ä, <code>-100123456789</code>).\n\n"
        "<b>–ö–∞–∫ —É–∑–Ω–∞—Ç—å ID?</b>\n"
        "1. –î–æ–±–∞–≤—å—Ç–µ –±–æ—Ç–∞ <code>@userinfobot</code> –∏–ª–∏ <code>@getmyid_bot</code> –≤ –≤–∞—à –∫–∞–Ω–∞–ª/–≥—Ä—É–ø–ø—É.\n"
        "2. –û—Ç–ø—Ä–∞–≤—å—Ç–µ –ª—é–±–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –∏–ª–∏ –∫–æ–º–∞–Ω–¥—É (–Ω–∞–ø—Ä–∏–º–µ—Ä, /start), –∏ –±–æ—Ç –≤–µ—Ä–Ω—ë—Ç ID.\n"
        "3. –°–∫–æ–ø–∏—Ä—É–π—Ç–µ ID (–æ–Ω –Ω–∞—á–∏–Ω–∞–µ—Ç—Å—è —Å <code>-100</code> –¥–ª—è –∫–∞–Ω–∞–ª–æ–≤ –∏ –≥—Ä—É–ø–ø).\n\n"
        "<b>–í–∞–∂–Ω–æ:</b>\n"
        "- –£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ —ç—Ç–æ—Ç –±–æ—Ç –¥–æ–±–∞–≤–ª–µ–Ω –≤ –∫–∞–Ω–∞–ª/–≥—Ä—É–ø–ø—É –∫–∞–∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä —Å –ø—Ä–∞–≤–∞–º–∏ –Ω–∞ –æ—Ç–ø—Ä–∞–≤–∫—É —Å–æ–æ–±—â–µ–Ω–∏–π.\n"
        "- –í–≤–µ–¥–∏—Ç–µ ID —Ç–æ—á–Ω–æ, –≤–∫–ª—é—á–∞—è –∑–Ω–∞–∫ –º–∏–Ω—É—Å –∏ –≤—Å–µ —Ü–∏—Ñ—Ä—ã.\n\n"
        "–ü—Ä–∏–º–µ—Ä –≤–≤–æ–¥–∞: <code>-100123456789</code>",
        parse_mode="HTML"
    )
    await state.set_state(FilterStates.waiting_channel_id)


@router.callback_query(lambda c: c.data.startswith("remove_channel_"))
async def process_remove_channel(callback: CallbackQuery):
    """–£–¥–∞–ª–∏—Ç—å –≤—ã–±—Ä–∞–Ω–Ω—ã–π –∫–∞–Ω–∞–ª"""
    try:
        chat_id = int(callback.data.split("_")[2])
        logging.info(f"–ü–æ–ø—ã—Ç–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è –∫–∞–Ω–∞–ª–∞ {chat_id}")

        if remove_channel(chat_id):
            await callback.message.edit_text(
                f"–ö–∞–Ω–∞–ª {chat_id} —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª—ë–Ω.", reply_markup=broadcast_management_keyboard()
            )
        else:
            await callback.message.edit_text(
                f"–ö–∞–Ω–∞–ª {chat_id} –Ω–µ –Ω–∞–π–¥–µ–Ω –∏–ª–∏ –Ω–µ —É–¥–∞–ª—ë–Ω.", reply_markup=broadcast_management_keyboard()
            )

    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ —É–¥–∞–ª–µ–Ω–∏—è –∫–∞–Ω–∞–ª–∞: {e}")
        await callback.message.edit_text(
            "–û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ –∫–∞–Ω–∞–ª–∞.", reply_markup=broadcast_management_keyboard()
        )


@router.callback_query(lambda c: c.data == "start_remove_channel")
async def start_remove_channel(callback: CallbackQuery):
    """–ù–∞—á–∞—Ç—å –ø—Ä–æ—Ü–µ—Å—Å —É–¥–∞–ª–µ–Ω–∏—è –∫–∞–Ω–∞–ª–∞, –ø–æ–∫–∞–∑–∞–≤ —Å–ø–∏—Å–æ–∫ –∫–∞–Ω–∞–ª–æ–≤ –¥–ª—è –≤—ã–±–æ—Ä–∞"""
    channels = get_channels()
    if not channels:
        await callback.message.edit_text(
            "–ù–µ—Ç –ø—Ä–∏–≤—è–∑–∞–Ω–Ω—ã—Ö –∫–∞–Ω–∞–ª–æ–≤.", reply_markup=broadcast_management_keyboard()
        )
        return

    # –°–æ–∑–¥–∞—ë–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –∫–Ω–æ–ø–∫–∞–º–∏ –¥–ª—è –∫–∞–∂–¥–æ–≥–æ –∫–∞–Ω–∞–ª–∞
    keyboard = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text=f"ID: {channel['chat_id']}", callback_data=f"remove_channel_{channel['chat_id']}")]
        for channel in channels
    ] + [[InlineKeyboardButton(text="üîô –ù–∞–∑–∞–¥", callback_data="manage_broadcast")]])

    await callback.message.edit_text("–í—ã–±–µ—Ä–∏—Ç–µ –∫–∞–Ω–∞–ª –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è:", reply_markup=keyboard)



@router.callback_query(lambda c: c.data == "list_channels")
async def callback_list_channels(callback: CallbackQuery):
    """–ü–æ–∫–∞–∑–∞—Ç—å —Å–ø–∏—Å–æ–∫ –∫–∞–Ω–∞–ª–æ–≤ —á–µ—Ä–µ–∑ callback –≤ –∫—Ä–∞—Å–∏–≤–æ–º —Ñ–æ—Ä–º–∞—Ç–µ"""
    channels = get_channels()
    logging.info(f"Callback –∑–∞–ø—Ä–æ—Å —Å–ø–∏—Å–∫–∞ –∫–∞–Ω–∞–ª–æ–≤, –ø–æ–ª—É—á–µ–Ω–æ: {channels}")

    if not channels:
        await callback.message.edit_text(
            "üì¨ –ù–µ—Ç –ø—Ä–∏–≤—è–∑–∞–Ω–Ω—ã—Ö –∫–∞–Ω–∞–ª–æ–≤.",
            reply_markup=broadcast_management_keyboard(),
            parse_mode="HTML"
        )
        return

    # –§–æ—Ä–º–∏—Ä—É–µ–º –∑–∞–≥–æ–ª–æ–≤–æ–∫
    text = "üìã <b>–°–ø–∏—Å–æ–∫ –ø—Ä–∏–≤—è–∑–∞–Ω–Ω—ã—Ö –∫–∞–Ω–∞–ª–æ–≤:</b>\n\n"

    for idx, channel in enumerate(channels, 1):
        status = "üü¢ –ê–∫—Ç–∏–≤–µ–Ω" if channel["is_active"] else "üî¥ –û—Ç–∫–ª—é—á—ë–Ω"
        filters = channel["filters"] or "–±–µ–∑ —Ñ–∏–ª—å—Ç—Ä–æ–≤"

        # –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º cron-—Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ –≤ —á–µ–ª–æ–≤–µ–∫–æ-—á–∏—Ç–∞–µ–º—ã–π —Ñ–æ—Ä–º–∞—Ç
        schedule_str = cron_to_human_readable(channel["schedule"])

        # –§–æ—Ä–º–∏—Ä—É–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –∫–∞–Ω–∞–ª–µ
        text += (
            f"<b>{idx}. –ö–∞–Ω–∞–ª:</b>\n"
            f"üÜî <b>ID:</b> {channel['chat_id']}\n"
            f"üîç <b>–§–∏–ª—å—Ç—Ä—ã:</b> {filters}\n"
            f"‚è∞ <b>–†–∞—Å–ø–∏—Å–∞–Ω–∏–µ:</b> {schedule_str}\n"
            f"üì° <b>–°—Ç–∞—Ç—É—Å:</b> {status}\n\n"
        )

    await callback.message.edit_text(
        text,
        reply_markup=broadcast_management_keyboard(),
        parse_mode="HTML"
    )




@router.callback_query(lambda c: c.data == "view_all")
async def show_all_animals(callback: CallbackQuery, state: FSMContext):
    """–ü–æ–∫–∞–∑–∞—Ç—å –≤—Å–µ—Ö –∂–∏–≤–æ—Ç–Ω—ã—Ö"""
    animals = get_all_animals()
    if not animals:
        await callback.answer("–ñ–∏–≤–æ—Ç–Ω—ã—Ö –ø–æ–∫–∞ –Ω–µ—Ç –≤ –±–∞–∑–µ.", show_alert=True)
        return

    keyboard = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text=f"üêæ {animal['name']}", callback_data=f"animal_{animal['id']}")]
        for animal in animals
    ])
    await state.update_data(list_type="view_all")
    logging.info("–ü–æ–∫–∞–∑–∞–Ω –ø–æ–ª–Ω—ã–π —Å–ø–∏—Å–æ–∫ –∂–∏–≤–æ—Ç–Ω—ã—Ö")
    await callback.message.answer("–í—Å–µ –¥–æ—Å—Ç—É–ø–Ω—ã–µ –∂–∏–≤–æ—Ç–Ω—ã–µ:", reply_markup=keyboard)


@router.callback_query(lambda c: c.data == "view_filtered")
async def choose_filters(callback: CallbackQuery, state: FSMContext):
    """–û—Ç–∫—Ä—ã—Ç—å –º–µ–Ω—é –≤—ã–±–æ—Ä–∞ —Ñ–∏–ª—å—Ç—Ä–æ–≤"""
    data = await state.get_data()
    selected_filters = data.get("filters", {})
    logging.info(f"–¢–µ–∫—É—â–∏–µ —Ñ–∏–ª—å—Ç—Ä—ã: {selected_filters}")
    await callback.message.edit_text("–í—ã–±–µ—Ä–∏—Ç–µ —Ñ–∏–ª—å—Ç—Ä:", reply_markup=filters_keyboard(selected_filters))


@router.callback_query(lambda c: c.data == "back_to_main")
async def back_to_main(callback: CallbackQuery, state: FSMContext):
    """–í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é"""
    await state.clear()
    await callback.message.edit_text("–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é:", reply_markup=main_keyboard())


@router.callback_query(lambda c: c.data == "filter_sex")
async def start_sex_filter(callback: CallbackQuery, state: FSMContext):
    """–ù–∞—á–∞—Ç—å –≤—ã–±–æ—Ä –ø–æ–ª–∞ –¥–ª—è –∏–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω—ã—Ö —Ñ–∏–ª—å—Ç—Ä–æ–≤"""
    await callback.message.edit_text("–í—ã–±–µ—Ä–∏—Ç–µ –ø–æ–ª:", reply_markup=sex_keyboard())
    await state.set_state(FilterStates.waiting_sex)


@router.callback_query(lambda c: c.data == "broadcast_filter_sex")
async def start_broadcast_sex_filter(callback: CallbackQuery, state: FSMContext):
    """–ù–∞—á–∞—Ç—å –≤—ã–±–æ—Ä –ø–æ–ª–∞ –¥–ª—è —Ñ–∏–ª—å—Ç—Ä–æ–≤ —Ä–∞—Å—Å—ã–ª–∫–∏"""
    await callback.message.edit_text("–í—ã–±–µ—Ä–∏—Ç–µ –ø–æ–ª:", reply_markup=sex_keyboard("broadcast_"))
    await state.set_state(FilterStates.waiting_sex)


@router.callback_query(lambda c: c.data.startswith("sex_") or c.data.startswith("broadcast_sex_"))
async def set_sex(callback: CallbackQuery, state: FSMContext):
    """–£—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –ø–æ–ª –≤ —Ñ–∏–ª—å—Ç—Ä–∞—Ö"""
    prefix = "broadcast_" if callback.data.startswith("broadcast_") else ""
    # –†–∞–∑–±–∏–≤–∞–µ–º callback.data –∏ –±–µ—Ä—ë–º –ø–æ—Å–ª–µ–¥–Ω–∏–π —ç–ª–µ–º–µ–Ω—Ç –∫–∞–∫ –ø–æ–ª
    parts = callback.data.split("_")
    sex = parts[-1]  # –ü–æ–ª –≤—Å–µ–≥–¥–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–π
    data = await state.get_data()
    filters = data.get("filters", {})
    filters["sex"] = sex
    await state.update_data(filters=filters)
    logging.info(f"–£—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω —Ñ–∏–ª—å—Ç—Ä –ø–æ–ª–∞: {sex}")
    if prefix:
        await callback.message.edit_text("–í—ã–±–µ—Ä–∏—Ç–µ —Ñ–∏–ª—å—Ç—Ä:", reply_markup=broadcast_filters_keyboard(filters))
    else:
        await callback.message.edit_text("–í—ã–±–µ—Ä–∏—Ç–µ —Ñ–∏–ª—å—Ç—Ä:", reply_markup=filters_keyboard(filters))
    await state.set_state(None)


@router.callback_query(lambda c: c.data == "filter_age")
async def start_age_filter(callback: CallbackQuery, state: FSMContext):
    """–ù–∞—á–∞—Ç—å –≤—ã–±–æ—Ä –≤–æ–∑—Ä–∞—Å—Ç–∞ –¥–ª—è –∏–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω—ã—Ö —Ñ–∏–ª—å—Ç—Ä–æ–≤"""
    max_age = get_max_age()
    if max_age <= 0:
        await callback.answer("–ù–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –≤–æ–∑—Ä–∞—Å—Ç–æ–≤ –¥–ª—è —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–∏.", show_alert=True)
        return
    await state.update_data(age_min=None, age_max=None)
    await callback.message.edit_text("–í—ã–±–µ—Ä–∏—Ç–µ –º–∏–Ω–∏–º–∞–ª—å–Ω—ã–π –≤–æ–∑—Ä–∞—Å—Ç:",
                                     reply_markup=age_keyboard(0, max_age, "min"))
    await state.set_state(FilterStates.waiting_min_age)


@router.callback_query(lambda c: c.data == "broadcast_filter_age")
async def start_broadcast_age_filter(callback: CallbackQuery, state: FSMContext):
    """–ù–∞—á–∞—Ç—å –≤—ã–±–æ—Ä –≤–æ–∑—Ä–∞—Å—Ç–∞ –¥–ª—è —Ñ–∏–ª—å—Ç—Ä–æ–≤ —Ä–∞—Å—Å—ã–ª–∫–∏"""
    max_age = get_max_age()
    if max_age <= 0:
        await callback.answer("–ù–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –≤–æ–∑—Ä–∞—Å—Ç–æ–≤ –¥–ª—è —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–∏.", show_alert=True)
        return
    await state.update_data(age_min=None, age_max=None)
    await callback.message.edit_text("–í—ã–±–µ—Ä–∏—Ç–µ –º–∏–Ω–∏–º–∞–ª—å–Ω—ã–π –≤–æ–∑—Ä–∞—Å—Ç:",
                                     reply_markup=age_keyboard(0, max_age, "min", "broadcast_"))
    await state.set_state(FilterStates.waiting_min_age)


@router.callback_query(lambda c: c.data.startswith("age_min_") or c.data.startswith("broadcast_age_min_"))
async def set_min_age(callback: CallbackQuery, state: FSMContext):
    """–£—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –º–∏–Ω–∏–º–∞–ª—å–Ω—ã–π –≤–æ–∑—Ä–∞—Å—Ç"""
    prefix = "broadcast_" if callback.data.startswith("broadcast_") else ""
    # –†–∞–∑–±–∏–≤–∞–µ–º callback.data –∏ –±–µ—Ä—ë–º –ø–æ—Å–ª–µ–¥–Ω–∏–π —ç–ª–µ–º–µ–Ω—Ç –∫–∞–∫ –≤–æ–∑—Ä–∞—Å—Ç
    parts = callback.data.split("_")
    min_age = int(parts[-1])  # –í–æ–∑—Ä–∞—Å—Ç –≤—Å–µ–≥–¥–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–π
    await state.update_data(age_min=min_age)
    max_age = get_max_age()
    if max_age <= min_age:
        await callback.answer("–ú–∞–∫—Å–∏–º–∞–ª—å–Ω—ã–π –≤–æ–∑—Ä–∞—Å—Ç –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –±–æ–ª—å—à–µ –º–∏–Ω–∏–º–∞–ª—å–Ω–æ–≥–æ.", show_alert=True)
        return
    logging.info(f"–£—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –º–∏–Ω–∏–º–∞–ª—å–Ω—ã–π –≤–æ–∑—Ä–∞—Å—Ç: {min_age}")
    await callback.message.edit_text("–í—ã–±–µ—Ä–∏—Ç–µ –º–∞–∫—Å–∏–º–∞–ª—å–Ω—ã–π –≤–æ–∑—Ä–∞—Å—Ç:",
                                     reply_markup=age_keyboard(min_age, max_age, "max", prefix))
    await state.set_state(FilterStates.waiting_max_age)


@router.callback_query(lambda c: c.data.startswith("age_max_") or c.data.startswith("broadcast_age_max_"))
async def set_max_age(callback: CallbackQuery, state: FSMContext):
    """–£—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –º–∞–∫—Å–∏–º–∞–ª—å–Ω—ã–π –≤–æ–∑—Ä–∞—Å—Ç"""
    prefix = "broadcast_" if callback.data.startswith("broadcast_") else ""
    # –†–∞–∑–±–∏–≤–∞–µ–º callback.data –∏ –±–µ—Ä—ë–º –ø–æ—Å–ª–µ–¥–Ω–∏–π —ç–ª–µ–º–µ–Ω—Ç –∫–∞–∫ –≤–æ–∑—Ä–∞—Å—Ç
    parts = callback.data.split("_")
    max_age = int(parts[-1])  # –í–æ–∑—Ä–∞—Å—Ç –≤—Å–µ–≥–¥–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–π
    data = await state.get_data()
    min_age = data.get("age_min", 0)

    if max_age < min_age:
        await callback.answer("–ú–∞–∫—Å–∏–º–∞–ª—å–Ω—ã–π –≤–æ–∑—Ä–∞—Å—Ç –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –±–æ–ª—å—à–µ –º–∏–Ω–∏–º–∞–ª—å–Ω–æ–≥–æ!", show_alert=True)
        return

    filters = data.get("filters", {})
    filters["age_min"] = min_age
    filters["age_max"] = max_age
    await state.update_data(filters=filters)
    logging.info(f"–£—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –¥–∏–∞–ø–∞–∑–æ–Ω –≤–æ–∑—Ä–∞—Å—Ç–∞: {min_age}-{max_age}")
    if prefix:
        await callback.message.edit_text("–í—ã–±–µ—Ä–∏—Ç–µ —Ñ–∏–ª—å—Ç—Ä:", reply_markup=broadcast_filters_keyboard(filters))
    else:
        await callback.message.edit_text("–í—ã–±–µ—Ä–∏—Ç–µ —Ñ–∏–ª—å—Ç—Ä:", reply_markup=filters_keyboard(filters))
    await state.set_state(None)


@router.callback_query(lambda c: c.data == "filter_name")
async def start_name_filter(callback: CallbackQuery, state: FSMContext):
    """–ù–∞—á–∞—Ç—å –ø–æ–∏—Å–∫ –ø–æ –∏–º–µ–Ω–∏ –¥–ª—è –∏–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω—ã—Ö —Ñ–∏–ª—å—Ç—Ä–æ–≤"""
    await callback.message.edit_text("–í–≤–µ–¥–∏—Ç–µ –∏–º—è –∂–∏–≤–æ—Ç–Ω–æ–≥–æ (–∏–ª–∏ —á–∞—Å—Ç—å –∏–º–µ–Ω–∏):")
    await state.set_state(FilterStates.waiting_name)


@router.callback_query(lambda c: c.data == "broadcast_filter_name")
async def start_broadcast_name_filter(callback: CallbackQuery, state: FSMContext):
    """–ù–∞—á–∞—Ç—å –ø–æ–∏—Å–∫ –ø–æ –∏–º–µ–Ω–∏ –¥–ª—è —Ñ–∏–ª—å—Ç—Ä–æ–≤ —Ä–∞—Å—Å—ã–ª–∫–∏"""
    await callback.message.edit_text("–í–≤–µ–¥–∏—Ç–µ –∏–º—è –∂–∏–≤–æ—Ç–Ω–æ–≥–æ (–∏–ª–∏ —á–∞—Å—Ç—å –∏–º–µ–Ω–∏):")
    await state.set_state(FilterStates.waiting_name)


@router.message(FilterStates.waiting_name)
async def set_name(message: Message, state: FSMContext):
    """–£—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –∏–º—è –≤ —Ñ–∏–ª—å—Ç—Ä–∞—Ö"""
    name = message.text.strip()
    if not name:
        await message.answer("–ò–º—è –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –ø—É—Å—Ç—ã–º. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.")
        return

    data = await state.get_data()
    filters = data.get("filters", {})
    filters["name"] = name
    await state.update_data(filters=filters)
    logging.info(f"–£—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω —Ñ–∏–ª—å—Ç—Ä –∏–º–µ–Ω–∏: {name}")

    if data.get("state") == "channel_filters":
        await message.answer("–§–∏–ª—å—Ç—Ä –ø–æ –∏–º–µ–Ω–∏ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω. –í—ã–±–µ—Ä–∏—Ç–µ —Å–ª–µ–¥—É—é—â–∏–π —Ñ–∏–ª—å—Ç—Ä:",
                             reply_markup=broadcast_filters_keyboard(filters))
    else:
        await message.answer("–§–∏–ª—å—Ç—Ä –ø–æ –∏–º–µ–Ω–∏ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω. –í—ã–±–µ—Ä–∏—Ç–µ —Å–ª–µ–¥—É—é—â–∏–π —Ñ–∏–ª—å—Ç—Ä:",
                             reply_markup=filters_keyboard(filters))
    await state.set_state(None)


@router.callback_query(lambda c: c.data == "back_to_filters")
async def back_to_filters(callback: CallbackQuery, state: FSMContext):
    """–í–µ—Ä–Ω—É—Ç—å—Å—è –∫ –≤—ã–±–æ—Ä—É –∏–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω—ã—Ö —Ñ–∏–ª—å—Ç—Ä–æ–≤"""
    data = await state.get_data()
    filters = data.get("filters", {})
    await callback.message.edit_text("–í—ã–±–µ—Ä–∏—Ç–µ —Ñ–∏–ª—å—Ç—Ä:", reply_markup=filters_keyboard(filters))
    await state.set_state(None)


@router.callback_query(lambda c: c.data == "back_to_broadcast_filters")
async def back_to_broadcast_filters(callback: CallbackQuery, state: FSMContext):
    """–í–µ—Ä–Ω—É—Ç—å—Å—è –∫ –≤—ã–±–æ—Ä—É —Ñ–∏–ª—å—Ç—Ä–æ–≤ —Ä–∞—Å—Å—ã–ª–∫–∏"""
    data = await state.get_data()
    filters = data.get("filters", {})
    await callback.message.edit_text("–í—ã–±–µ—Ä–∏—Ç–µ —Ñ–∏–ª—å—Ç—Ä:", reply_markup=broadcast_filters_keyboard(filters))
    await state.set_state(None)


@router.callback_query(lambda c: c.data == "show_filtered")
async def show_filtered(callback: CallbackQuery, state: FSMContext):
    """–ü–æ–∫–∞–∑–∞—Ç—å –∂–∏–≤–æ—Ç–Ω—ã—Ö –ø–æ –∏–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω—ã–º —Ñ–∏–ª—å—Ç—Ä–∞–º"""
    data = await state.get_data()
    filters = data.get("filters", {})
    logging.info(f"–ü—Ä–∏–º–µ–Ω–µ–Ω–∏–µ —Ñ–∏–ª—å—Ç—Ä–æ–≤: {filters}")

    if not filters:
        await callback.answer("–í—ã–±–µ—Ä–∏—Ç–µ —Ö–æ—Ç—è –±—ã –æ–¥–∏–Ω —Ñ–∏–ª—å—Ç—Ä!", show_alert=True)
        return

    animals = get_animals_by_filters(filters)
    if not animals:
        await callback.answer("–ñ–∏–≤–æ—Ç–Ω—ã–µ –ø–æ —ç—Ç–∏–º —Ñ–∏–ª—å—Ç—Ä–∞–º –Ω–µ –Ω–∞–π–¥–µ–Ω—ã.", show_alert=True)
        return

    keyboard = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text=f"üêæ {animal['name']}", callback_data=f"animal_{animal['id']}")]
        for animal in animals
    ])
    await state.update_data(list_type="show_filtered", filters=filters)
    logging.info("–ü–æ–∫–∞–∑–∞–Ω –æ—Ç—Ñ–∏–ª—å—Ç—Ä–æ–≤–∞–Ω–Ω—ã–π —Å–ø–∏—Å–æ–∫ –∂–∏–≤–æ—Ç–Ω—ã—Ö")
    await callback.message.edit_text("–†–µ–∑—É–ª—å—Ç–∞—Ç—ã –ø–æ —Ñ–∏–ª—å—Ç—Ä–∞–º:", reply_markup=keyboard)


@router.callback_query(lambda c: c.data == "save_broadcast_filters")
async def save_broadcast_filters(callback: CallbackQuery, state: FSMContext):
    """–°–æ—Ö—Ä–∞–Ω–∏—Ç—å —Ñ–∏–ª—å—Ç—Ä—ã –¥–ª—è –∫–∞–Ω–∞–ª–∞"""
    data = await state.get_data()
    filters = data.get("filters", {})
    chat_id = data.get("channel_id")
    schedule = data.get("schedule", "0 10 * * *")
    add_channel(chat_id, filters=filters, schedule=schedule)
    logging.info(f"–§–∏–ª—å—Ç—Ä—ã –¥–ª—è –∫–∞–Ω–∞–ª–∞ {chat_id} —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã: {filters}, —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ: {schedule}")
    await callback.message.edit_text("–§–∏–ª—å—Ç—Ä—ã –∏ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ –¥–ª—è –∫–∞–Ω–∞–ª–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã.",
                                     reply_markup=broadcast_management_keyboard())
    await state.set_state(None)


@router.callback_query(lambda c: c.data.startswith("animal_"))
async def show_animal_details(callback: CallbackQuery, state: FSMContext):
    """–ü–æ–∫–∞–∑–∞—Ç—å –¥–µ—Ç–∞–ª–∏ –∂–∏–≤–æ—Ç–Ω–æ–≥–æ —Å –∫—Ä–∞—Å–∏–≤–æ–π —Ä–∞–∑–º–µ—Ç–∫–æ–π"""
    animal_id = int(callback.data.split("_")[1])
    animals = get_all_animals()
    animal = next((a for a in animals if a["id"] == animal_id), None)

    if animal:
        text = (
            f"üêæ <b>{animal['name']}</b>\n\n"
            f"üìÖ <b>–í–æ–∑—Ä–∞—Å—Ç:</b> {animal['age']}\n"
            f"‚ö§ <b>–ü–æ–ª:</b> {animal['sex']}"
        )
        keyboard = InlineKeyboardMarkup(inline_keyboard=[
            [InlineKeyboardButton(text="üåê –ü–µ—Ä–µ–π—Ç–∏ –Ω–∞ —Å–∞–π—Ç",
                                  url=animal['description'] if animal['description'].startswith(
                                      'http') else 'https://less-homeless.com')],
            [InlineKeyboardButton(text="üîô –ù–∞–∑–∞–¥ –∫ —Å–ø–∏—Å–∫—É", callback_data="back_to_list")]
        ])
        try:
            sent_message = await callback.message.answer_photo(
                photo=animal['photo_url'],
                caption=text,
                parse_mode="HTML",
                reply_markup=keyboard
            )
            await state.update_data(card_message_id=sent_message.message_id)
            await callback.message.delete()
        except Exception as e:
            logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Ñ–æ—Ç–æ: {e}")
            sent_message = await callback.message.answer(
                text=text,
                parse_mode="HTML",
                reply_markup=keyboard
            )
            await state.update_data(card_message_id=sent_message.message_id)
            await callback.message.delete()
    else:
        await callback.answer("–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –∂–∏–≤–æ—Ç–Ω–æ–º –Ω–µ –Ω–∞–π–¥–µ–Ω–∞.", show_alert=True)


@router.callback_query(lambda c: c.data == "back_to_list")
async def back_to_list(callback: CallbackQuery, state: FSMContext):
    """–í–µ—Ä–Ω—É—Ç—å—Å—è –∫ –ø—Ä–µ–¥—ã–¥—É—â–µ–º—É —Å–ø–∏—Å–∫—É (–ø–æ–ª–Ω–æ–º—É –∏–ª–∏ –æ—Ç—Ñ–∏–ª—å—Ç—Ä–æ–≤–∞–Ω–Ω–æ–º—É)"""
    data = await state.get_data()
    list_type = data.get("list_type", "view_all")
    card_message_id = data.get("card_message_id")

    if card_message_id:
        try:
            await bot.delete_message(chat_id=callback.message.chat.id, message_id=card_message_id)
        except Exception as e:
            logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ –∫–∞—Ä—Ç–æ—á–∫–∏ –ø–∏—Ç–æ–º—Ü–∞: {e}")

    if list_type == "show_filtered":
        filters = data.get("filters", {})
        animals = get_animals_by_filters(filters)
        if not animals:
            await callback.message.answer("–ñ–∏–≤–æ—Ç–Ω—ã–µ –ø–æ —ç—Ç–∏–º —Ñ–∏–ª—å—Ç—Ä–∞–º –Ω–µ –Ω–∞–π–¥–µ–Ω—ã.")
            return
        keyboard = InlineKeyboardMarkup(inline_keyboard=[
            [InlineKeyboardButton(text=f"üêæ {animal['name']}", callback_data=f"animal_{animal['id']}")]
            for animal in animals
        ])
        await callback.message.answer("–†–µ–∑—É–ª—å—Ç–∞—Ç—ã –ø–æ —Ñ–∏–ª—å—Ç—Ä–∞–º:", reply_markup=keyboard)
        logging.info(f"–í–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –æ—Ç—Ñ–∏–ª—å—Ç—Ä–æ–≤–∞–Ω–Ω—ã–π —Å–ø–∏—Å–æ–∫ —Å —Ñ–∏–ª—å—Ç—Ä–∞–º–∏: {filters}")
    else:
        animals = get_all_animals()
        if not animals:
            await callback.message.answer("–ñ–∏–≤–æ—Ç–Ω—ã—Ö –ø–æ–∫–∞ –Ω–µ—Ç –≤ –±–∞–∑–µ.")
            return
        keyboard = InlineKeyboardMarkup(inline_keyboard=[
            [InlineKeyboardButton(text=f"üêæ {animal['name']}", callback_data=f"animal_{animal['id']}")]
            for animal in animals
        ])
        await callback.message.answer("–í—Å–µ –¥–æ—Å—Ç—É–ø–Ω—ã–µ –∂–∏–≤–æ—Ç–Ω—ã–µ:", reply_markup=keyboard)
        logging.info("–í–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –ø–æ–ª–Ω—ã–π —Å–ø–∏—Å–æ–∫ –∂–∏–≤–æ—Ç–Ω—ã—Ö")


# ======================== –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞ –∏ –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫–∞ ========================

async def main():
    # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
    init_db()

    # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∏ –∑–∞–ø—É—Å–∫ –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫–∞
    global scheduler
    scheduler.remove_all_jobs()  # –û—á–∏—Å—Ç–∫–∞ —Å—Ç–∞—Ä—ã—Ö –∑–∞–¥–∞—á
    logging.info("–í—Å–µ —Å—Ç–∞—Ä—ã–µ –∑–∞–¥–∞—á–∏ —É–¥–∞–ª–µ–Ω—ã")
    channels = get_channels()
    for channel in channels:
        if channel["is_active"]:
            try:
                scheduler.add_job(
                    broadcast_animal_for_channel,
                    trigger=CronTrigger.from_crontab(channel["schedule"]),
                    args=[channel["chat_id"]],
                    id=str(channel["chat_id"])
                )
                logging.info(
                    f"–ó–∞–¥–∞—á–∞ —Ä–∞—Å—Å—ã–ª–∫–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∞ –¥–ª—è –∫–∞–Ω–∞–ª–∞ {channel['chat_id']} —Å —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ–º {channel['schedule']}")
            except ValueError as e:
                logging.error(f"–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ –¥–ª—è –∫–∞–Ω–∞–ª–∞ {channel['chat_id']}: {e}")
    logging.info(f"–¢–µ–∫—É—â–∏–µ –∑–∞–¥–∞—á–∏: {[job.id for job in scheduler.get_jobs()]}")
    scheduler.start()
    logging.info("–ü–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫ –∑–∞–ø—É—â–µ–Ω")

    # –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞
    dp.include_router(router)
    await dp.start_polling(bot)


if __name__ == "__main__":
    asyncio.run(main())
# ======================== –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞ ========================

async def start_bot():
    dp.include_router(router)
    await dp.start_polling(bot)


# if __name__ == "__main__":
#     asyncio.run(main())